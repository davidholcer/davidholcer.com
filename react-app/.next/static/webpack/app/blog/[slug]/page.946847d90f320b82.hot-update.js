"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/blog/[slug]/page",{

/***/ "(app-pages-browser)/./src/components/BlogPost.tsx":
/*!*************************************!*\
  !*** ./src/components/BlogPost.tsx ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ BlogPost; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/image */ \"(app-pages-browser)/./node_modules/next/dist/api/image.js\");\n/* harmony import */ var _ui_CodeBlock__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui/CodeBlock */ \"(app-pages-browser)/./src/components/ui/CodeBlock.tsx\");\n/* harmony import */ var _TableOfContents__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TableOfContents */ \"(app-pages-browser)/./src/components/TableOfContents.tsx\");\n/* harmony import */ var _ui_Footnote__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui/Footnote */ \"(app-pages-browser)/./src/components/ui/Footnote.tsx\");\n/* harmony import */ var _P5Sketch__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./P5Sketch */ \"(app-pages-browser)/./src/components/P5Sketch.tsx\");\n/* harmony import */ var _ui_Video__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ui/Video */ \"(app-pages-browser)/./src/components/ui/Video.tsx\");\n/* harmony import */ var _ui_PDF__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ui/PDF */ \"(app-pages-browser)/./src/components/ui/PDF.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\nfunction BlogPost(param) {\n    let { content, title, date, author, image, description, iama } = param;\n    _s();\n    const [headings, setHeadings] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [footnotes, setFootnotes] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [footnoteContents, setFootnoteContents] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [zoomedImage, setZoomedImage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [contentSegments, setContentSegments] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [parsedData, setParsedData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [tocPosition, setTocPosition] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        top: 18.75,\n        left: 8\n    }); // 300px / 16 = 18.75rem\n    const [tocVisible, setTocVisible] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    // Store footnote contents in a ref to avoid state update timing issues\n    const footnoteContentsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    // Track scroll position for TOC positioning with throttling\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        let ticking = false;\n        const handleScroll = ()=>{\n            if (!ticking) {\n                requestAnimationFrame(()=>{\n                    const scrollY = window.scrollY;\n                    const windowHeight = window.innerHeight;\n                    const tocHeight = 400; // Approximate TOC height\n                    const footer = document.querySelector(\"footer\");\n                    console.log(\"Scroll event triggered:\", {\n                        scrollY,\n                        windowHeight\n                    });\n                    // Base position - starts lower and moves with scroll but stays within bounds\n                    let baseTop = 300 + scrollY * 0.15; // Start lower and move with scroll at 15% rate\n                    console.log(\"Base top position:\", baseTop);\n                    // Ensure TOC doesn't go too high\n                    const minTop = 200; // Higher minimum top position\n                    baseTop = Math.max(minTop, baseTop);\n                    // Check if TOC would overlap with footer\n                    let shouldHide = false;\n                    if (footer) {\n                        const footerRect = footer.getBoundingClientRect();\n                        const footerTop = footerRect.top;\n                        // If TOC would overlap with footer, hide it\n                        if (baseTop + tocHeight > footerTop - 20) {\n                            shouldHide = true;\n                        }\n                    }\n                    // Also hide if TOC would go below viewport\n                    if (baseTop + tocHeight > windowHeight - 40) {\n                        shouldHide = true;\n                    }\n                    // Convert to rem units for consistency\n                    const topInRem = baseTop / 16;\n                    console.log(\"Setting TOC position:\", {\n                        top: topInRem,\n                        left: 8,\n                        shouldHide\n                    });\n                    setTocPosition({\n                        top: topInRem,\n                        left: 8\n                    });\n                    setTocVisible(!shouldHide);\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        };\n        // Initial call to set position\n        handleScroll();\n        // Use locomotive scroll container if available\n        const scrollContainer = document.querySelector(\"[data-scroll-container]\");\n        if (scrollContainer) {\n            console.log(\"Using locomotive scroll container\");\n            scrollContainer.addEventListener(\"scroll\", handleScroll);\n            return ()=>scrollContainer.removeEventListener(\"scroll\", handleScroll);\n        } else {\n            console.log(\"Using window scroll\");\n            window.addEventListener(\"scroll\", handleScroll, {\n                passive: true\n            });\n            return ()=>window.removeEventListener(\"scroll\", handleScroll);\n        }\n    }, []);\n    // Parse markdown frontmatter and content\n    const parseMarkdown = (markdownContent)=>{\n        const frontmatterRegex = /^\\+\\+\\+\\s*\\n([\\s\\S]*?)\\n\\+\\+\\+\\s*\\n([\\s\\S]*)$/;\n        const match = markdownContent.match(frontmatterRegex);\n        if (match) {\n            const frontmatter = match[1];\n            const content = match[2];\n            // Parse frontmatter\n            const metadata = {};\n            const lines = frontmatter.split(\"\\n\").filter((line)=>line.trim());\n            lines.forEach((line)=>{\n                const equalIndex = line.indexOf(\" = \");\n                if (equalIndex !== -1) {\n                    const key = line.substring(0, equalIndex).trim();\n                    let value = line.substring(equalIndex + 3).trim();\n                    // Remove quotes if present\n                    if (value.startsWith('\"') && value.endsWith('\"')) {\n                        value = value.slice(1, -1);\n                    }\n                    metadata[key] = value;\n                }\n            });\n            return {\n                metadata,\n                content\n            };\n        }\n        return {\n            metadata: {},\n            content: markdownContent\n        };\n    };\n    // Process inline code\n    const processInlineCode = (content)=>{\n        const inlineCodeRegex = /`([^`]+)`/g;\n        return content.replace(inlineCodeRegex, '<code class=\"inline-code\">$1</code>');\n    };\n    // Parse P5Sketch components\n    const parseP5SketchComponents = (content)=>{\n        const segments = [];\n        // Simpler regex that matches the basic structure first\n        const p5SketchRegex = /<P5Sketch\\s+sketchPath=\"([^\"]+)\"\\s+width={(\\d+)}\\s+height={(\\d+)}[^>]*className=\"([^\"]+)\"\\s*\\/>/g;\n        let lastIndex = 0;\n        let match;\n        while((match = p5SketchRegex.exec(content)) !== null){\n            // Add content before the P5Sketch component\n            if (match.index > lastIndex) {\n                const beforeContent = content.substring(lastIndex, match.index);\n                if (beforeContent.trim()) {\n                    segments.push({\n                        type: \"html\",\n                        content: beforeContent\n                    });\n                }\n            }\n            // Parse the P5Sketch props\n            const p5SketchProps = {\n                sketchPath: match[1],\n                width: parseInt(match[2]),\n                height: parseInt(match[3]),\n                className: match[4]\n            };\n            // Extract sketchWidth and sketchHeight from the full match if they exist\n            const fullMatch = match[0];\n            const sketchWidthMatch = fullMatch.match(/sketchWidth={(\\d+)}/);\n            const sketchHeightMatch = fullMatch.match(/sketchHeight={(\\d+)}/);\n            if (sketchWidthMatch && sketchHeightMatch) {\n                p5SketchProps.sketchWidth = parseInt(sketchWidthMatch[1]);\n                p5SketchProps.sketchHeight = parseInt(sketchHeightMatch[1]);\n            }\n            // Add the P5Sketch component\n            segments.push({\n                type: \"p5sketch\",\n                content: \"\",\n                p5Sketch: p5SketchProps\n            });\n            lastIndex = match.index + match[0].length;\n        }\n        // Add remaining content after the last P5Sketch component\n        if (lastIndex < content.length) {\n            const afterContent = content.substring(lastIndex);\n            if (afterContent.trim()) {\n                segments.push({\n                    type: \"html\",\n                    content: afterContent\n                });\n            }\n        }\n        return segments;\n    };\n    // Parse Video components - simplified for Safari\n    const parseVideoComponents = (content)=>{\n        const segments = [];\n        const videoRegex = /<Video\\s+src=\"([^\"]+)\"[^>]*className=\"([^\"]+)\"\\s*\\/>/g;\n        let lastIndex = 0;\n        let match;\n        while((match = videoRegex.exec(content)) !== null){\n            // Add content before the Video component\n            if (match.index > lastIndex) {\n                const beforeContent = content.substring(lastIndex, match.index);\n                if (beforeContent.trim()) {\n                    segments.push({\n                        type: \"html\",\n                        content: beforeContent\n                    });\n                }\n            }\n            // Parse the Video props - simplified\n            const fullMatch = match[0];\n            const videoProps = {\n                src: match[1],\n                className: match[2]\n            };\n            // Extract additional props from the full match\n            const widthMatch = fullMatch.match(/width=\"([^\"]+)\"/);\n            const heightMatch = fullMatch.match(/height=\"([^\"]+)\"/);\n            const controlsMatch = fullMatch.match(/controls={([^}]+)}/);\n            const autoPlayMatch = fullMatch.match(/autoPlay={([^}]+)}/);\n            const mutedMatch = fullMatch.match(/muted={([^}]+)}/);\n            const loopMatch = fullMatch.match(/loop={([^}]+)}/);\n            const posterMatch = fullMatch.match(/poster=\"([^\"]+)\"/);\n            if (widthMatch) videoProps.width = widthMatch[1];\n            if (heightMatch) videoProps.height = heightMatch[1];\n            if (controlsMatch) videoProps.controls = controlsMatch[1] === \"true\";\n            if (autoPlayMatch) videoProps.autoPlay = autoPlayMatch[1] === \"true\";\n            if (mutedMatch) videoProps.muted = mutedMatch[1] === \"true\";\n            if (loopMatch) videoProps.loop = loopMatch[1] === \"true\";\n            if (posterMatch) videoProps.poster = posterMatch[1];\n            // Add the Video component\n            segments.push({\n                type: \"video\",\n                content: \"\",\n                video: videoProps\n            });\n            lastIndex = match.index + match[0].length;\n        }\n        // Add remaining content after the last Video component\n        if (lastIndex < content.length) {\n            const afterContent = content.substring(lastIndex);\n            if (afterContent.trim()) {\n                segments.push({\n                    type: \"html\",\n                    content: afterContent\n                });\n            }\n        }\n        return segments;\n    };\n    // Parse PDF components\n    const parsePDFComponents = (content)=>{\n        const segments = [];\n        const pdfRegex = /<PDF\\s+src=\"([^\"]+)\"[^>]*className=\"([^\"]+)\"\\s*\\/>/g;\n        let lastIndex = 0;\n        let match;\n        while((match = pdfRegex.exec(content)) !== null){\n            // Add content before the PDF component\n            if (match.index > lastIndex) {\n                const beforeContent = content.substring(lastIndex, match.index);\n                if (beforeContent.trim()) {\n                    segments.push({\n                        type: \"html\",\n                        content: beforeContent\n                    });\n                }\n            }\n            // Parse the PDF props\n            const fullMatch = match[0];\n            const pdfProps = {\n                src: match[1],\n                className: match[2]\n            };\n            // Extract additional props from the full match\n            const widthMatch = fullMatch.match(/width=\"([^\"]+)\"/);\n            const heightMatch = fullMatch.match(/height=\"([^\"]+)\"/);\n            if (widthMatch) pdfProps.width = widthMatch[1];\n            if (heightMatch) pdfProps.height = heightMatch[1];\n            // Add the PDF component\n            segments.push({\n                type: \"pdf\",\n                content: \"\",\n                pdf: pdfProps\n            });\n            lastIndex = match.index + match[0].length;\n        }\n        // Add remaining content after the last PDF component\n        if (lastIndex < content.length) {\n            const afterContent = content.substring(lastIndex);\n            if (afterContent.trim()) {\n                segments.push({\n                    type: \"html\",\n                    content: afterContent\n                });\n            }\n        }\n        return segments;\n    };\n    // Convert markdown to HTML and extract code blocks\n    const processMarkdown = (content)=>{\n        let processed = content;\n        const segments = [];\n        const codeBlocks = [];\n        // Process footnotes BEFORE splitting by code blocks\n        const footnoteRegex = /<footnote id=\"(\\d+)\" text=\"([^\"]+)\" content=\"([^\"]*?)\"><\\/footnote>/g;\n        let footnoteMatch;\n        console.log(\"=== PROCESSMARKDOWN FOOTNOTE DEBUG ===\");\n        console.log(\"Looking for footnotes in processed content...\");\n        // Find all footnote elements first\n        const allFootnotes = processed.match(/<footnote[^>]*><\\/footnote>/g);\n        console.log(\"All footnote elements found:\", allFootnotes);\n        // Process each footnote manually\n        let footnoteCount = 0;\n        allFootnotes === null || allFootnotes === void 0 ? void 0 : allFootnotes.forEach((footnoteElement, index)=>{\n            // Extract id, text, and content using a more robust approach\n            const idMatch = footnoteElement.match(/id=\"(\\d+)\"/);\n            const textMatch = footnoteElement.match(/text=\"([^\"]+)\"/);\n            const contentMatch = footnoteElement.match(/content=\"([^\"]+)\"/);\n            if (idMatch && textMatch && contentMatch) {\n                const id = idMatch[1];\n                const text = textMatch[1];\n                const encodedContent = contentMatch[1];\n                footnoteCount++;\n                // Decode the content and store in ref\n                const decodedContent = decodeURIComponent(encodedContent);\n                footnoteContentsRef.current[id] = decodedContent;\n                // Replace the footnote element\n                const replacement = '<span class=\"footnote-wrapper\"><button class=\"footnote-button\" data-footnote-id=\"'.concat(id, '\">').concat(id, \"</button></span>\");\n                processed = processed.replace(footnoteElement, replacement);\n            }\n        });\n        console.log(\"Total footnotes processed in processMarkdown: \".concat(footnoteCount));\n        // Split content by code blocks\n        const parts = processed.split(/(```[\\w]*\\n[\\s\\S]*?```)/g);\n        console.log(\"Content split into\", parts.length, \"parts\");\n        parts.forEach((part, index)=>{\n            if (part.includes(\"footnote-wrapper\")) {\n                console.log(\"Part \".concat(index, \" contains footnotes:\"), part.substring(0, 200));\n            }\n        });\n        parts.forEach((part, index)=>{\n            if (part.startsWith(\"```\")) {\n                // This is a code block\n                const match = part.match(/```(\\w+)?\\n([\\s\\S]*?)```/);\n                if (match) {\n                    const language = match[1] || \"text\";\n                    const code = match[2].trim();\n                    const codeBlock = {\n                        language,\n                        code,\n                        filename: \"example.\".concat(language === \"javascript\" || language === \"js\" ? \"js\" : language === \"typescript\" || language === \"ts\" ? \"ts\" : language === \"jsx\" ? \"jsx\" : language === \"tsx\" ? \"tsx\" : language === \"html\" ? \"html\" : language === \"css\" ? \"css\" : language === \"python\" ? \"py\" : language)\n                    };\n                    segments.push({\n                        type: \"codeblock\",\n                        content: \"\",\n                        codeBlock\n                    });\n                }\n            } else if (part.trim()) {\n                // This is regular content\n                let htmlContent = part;\n                // Process inline code\n                htmlContent = processInlineCode(htmlContent);\n                // Process headers with IDs\n                htmlContent = htmlContent.replace(/^### (.*$)/gim, (match, text)=>{\n                    const id = text.toLowerCase().replace(/[^a-z0-9]+/g, \"-\").replace(/(^-|-$)/g, \"\");\n                    return '<h3 id=\"'.concat(id, '\">').concat(text, \"</h3>\");\n                });\n                htmlContent = htmlContent.replace(/^## (.*$)/gim, (match, text)=>{\n                    const id = text.toLowerCase().replace(/[^a-z0-9]+/g, \"-\").replace(/(^-|-$)/g, \"\");\n                    return '<h2 id=\"'.concat(id, '\">').concat(text, \"</h2>\");\n                });\n                htmlContent = htmlContent.replace(/^# (.*$)/gim, \"<h1>$1</h1>\");\n                // Process bold and italic\n                htmlContent = htmlContent.replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\");\n                htmlContent = htmlContent.replace(/\\*(.*?)\\*/g, \"<em>$1</em>\");\n                // Process links\n                htmlContent = htmlContent.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\">$1</a>');\n                // Process ordered lists\n                htmlContent = htmlContent.replace(/^\\d+\\.\\s+(.+)$/gm, \"<li>$1</li>\");\n                htmlContent = htmlContent.replace(/(<li>.*<\\/li>)/g, \"<ol>$1</ol>\");\n                // Process unordered lists\n                htmlContent = htmlContent.replace(/^-\\s+(.+)$/gm, \"<li>$1</li>\");\n                htmlContent = htmlContent.replace(/(<li>.*<\\/li>)/g, \"<ul>$1</ul>\");\n                // Process paragraphs\n                htmlContent = htmlContent.split(\"\\n\\n\").map((paragraph)=>{\n                    paragraph = paragraph.trim();\n                    if (!paragraph) return \"\";\n                    // Don't wrap headers, lists, or footnote elements in p tags\n                    if (paragraph.startsWith(\"<h\") || paragraph.startsWith(\"<ul>\") || paragraph.startsWith(\"<ol>\") || paragraph.includes(\"footnote-wrapper\")) {\n                        return paragraph;\n                    }\n                    return \"<p>\".concat(paragraph, \"</p>\");\n                }).join(\"\\n\");\n                segments.push({\n                    type: \"html\",\n                    content: htmlContent\n                });\n            }\n        });\n        return segments;\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        let contentToProcess = content;\n        // First, try to parse markdown if it looks like it has frontmatter\n        if (content.startsWith(\"+++\")) {\n            const parsed = parseMarkdown(content);\n            setParsedData(parsed);\n            contentToProcess = parsed.content;\n        }\n        // Parse footnotes\n        const { processedContent, footnotes: parsedFootnotes } = (0,_ui_Footnote__WEBPACK_IMPORTED_MODULE_5__.parseFootnotes)(contentToProcess);\n        setFootnotes(parsedFootnotes);\n        // Parse P5Sketch components first\n        const p5Segments = parseP5SketchComponents(processedContent);\n        // Parse Video and PDF components from P5Sketch segments\n        const finalSegments = [];\n        p5Segments.forEach((segment)=>{\n            if (segment.type === \"p5sketch\") {\n                finalSegments.push(segment);\n            } else {\n                // Parse Video components from HTML segments\n                const videoSegments = parseVideoComponents(segment.content);\n                videoSegments.forEach((videoSegment)=>{\n                    if (videoSegment.type === \"video\") {\n                        finalSegments.push(videoSegment);\n                    } else {\n                        // Parse PDF components from remaining HTML segments\n                        const pdfSegments = parsePDFComponents(videoSegment.content);\n                        pdfSegments.forEach((pdfSegment)=>{\n                            if (pdfSegment.type === \"pdf\") {\n                                finalSegments.push(pdfSegment);\n                            } else {\n                                // Process markdown for remaining HTML segments\n                                const markdownSegments = processMarkdown(pdfSegment.content);\n                                finalSegments.push(...markdownSegments);\n                            }\n                        });\n                    }\n                });\n            }\n        });\n        setContentSegments(finalSegments);\n    }, [\n        content\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (contentSegments.length === 0) return;\n        // Extract headings and footnotes after content is processed\n        setTimeout(()=>{\n            const headingElements = document.querySelectorAll(\"h2[id], h3[id]\");\n            const extractedHeadings = Array.from(headingElements).map((heading)=>({\n                    id: heading.id,\n                    text: heading.textContent || \"\",\n                    level: parseInt(heading.tagName.charAt(1))\n                }));\n            setHeadings(extractedHeadings);\n            // Image click zoom\n            const imgElements = document.querySelectorAll(\".blog-content-container img\");\n            imgElements.forEach((img)=>{\n                img.style.cursor = \"zoom-in\";\n                img.onclick = ()=>handleImageClick(img.src);\n            });\n            // Setup footnote toggling with a delay to ensure DOM is ready\n            setTimeout(()=>{\n                const footnoteButtons = document.querySelectorAll(\".footnote-button\");\n                console.log(\"Found footnote buttons:\", footnoteButtons.length);\n                footnoteButtons.forEach((button, index)=>{\n                    console.log(\"Setting up button \".concat(index, \":\"), button);\n                    // Remove any existing listeners\n                    button.removeEventListener(\"click\", handleFootnoteClick);\n                    // Add new listener\n                    button.addEventListener(\"click\", handleFootnoteClick);\n                    // Also add onclick as backup\n                    button.onclick = (e)=>{\n                        e.preventDefault();\n                        e.stopPropagation();\n                        const footnoteId = button.getAttribute(\"data-footnote-id\");\n                        console.log(\"Footnote clicked via onclick:\", {\n                            footnoteId\n                        });\n                        if (footnoteId) {\n                            toggleFootnote(footnoteId);\n                        }\n                    };\n                });\n            }, 200);\n            // Add global click handler as backup\n            const handleGlobalClick = (e)=>{\n                const target = e.target;\n                if (target.classList.contains(\"footnote-button\")) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    const footnoteId = target.getAttribute(\"data-footnote-id\");\n                    console.log(\"Footnote clicked via global handler:\", {\n                        footnoteId\n                    });\n                    if (footnoteId) {\n                        toggleFootnote(footnoteId);\n                    }\n                }\n            };\n            document.addEventListener(\"click\", handleGlobalClick);\n        // No need to dispatch locomotive-update on blog pages since smooth scroll is disabled\n        }, 100);\n    }, [\n        contentSegments\n    ]);\n    // Separate function for footnote click handling\n    const handleFootnoteClick = (e)=>{\n        e.preventDefault();\n        e.stopPropagation();\n        const button = e.target;\n        const footnoteId = button.getAttribute(\"data-footnote-id\");\n        console.log(\"Footnote clicked via event listener:\", {\n            footnoteId\n        });\n        if (footnoteId) {\n            toggleFootnote(footnoteId);\n        }\n    };\n    // Function to toggle footnote visibility\n    const toggleFootnote = (id)=>{\n        console.log(\"toggleFootnote called with:\", {\n            id\n        });\n        console.log(\"All footnote contents in ref:\", footnoteContentsRef.current);\n        // Get content from ref\n        const footnoteContent = footnoteContentsRef.current[id];\n        console.log(\"Footnote content for id\", id, \":\", footnoteContent);\n        if (!footnoteContent) {\n            console.error(\"No footnote content found for id:\", id);\n            return;\n        }\n        // Remove highlight from all footnotes\n        document.querySelectorAll(\".footnote-highlight\").forEach((el)=>{\n            el.classList.remove(\"footnote-highlight\");\n        });\n        // Remove any existing footnotes\n        document.querySelectorAll(\".dynamic-footnote\").forEach((el)=>{\n            el.remove();\n        });\n        // Get the button that was clicked\n        const button = document.querySelector('[data-footnote-id=\"'.concat(id, '\"]'));\n        if (button) {\n            const wrapper = button.closest(\".footnote-wrapper\");\n            if (wrapper) {\n                console.log(\"Wrapper:\", wrapper);\n                // Set wrapper position\n                wrapper.style.position = \"relative\";\n                // Create the footnote with simple centered positioning\n                const footnote = document.createElement(\"div\");\n                footnote.className = \"dynamic-footnote\";\n                footnote.style.position = \"absolute\";\n                footnote.style.left = \"0%\";\n                footnote.style.top = \"170%\";\n                footnote.style.zIndex = \"1000\";\n                footnote.innerHTML = '\\n          <div class=\"footnote-content\">\\n            <div class=\"footnote-header\">\\n              <span class=\"footnote-number\">'.concat(id, '</span>\\n              <button class=\"footnote-close\" onclick=\"closeFootnote(\\'').concat(id, '\\')\">\\xd7</button>\\n            </div>\\n            <div class=\"footnote-text\"></div>\\n          </div>\\n        ');\n                // Set the HTML content properly to render links\n                const footnoteTextElement = footnote.querySelector(\".footnote-text\");\n                if (footnoteTextElement) {\n                    footnoteTextElement.innerHTML = footnoteContent;\n                }\n                // Add the footnote\n                wrapper.appendChild(footnote);\n            }\n            // Highlight the button\n            button.classList.add(\"footnote-highlight\");\n        }\n    };\n    // Function to close footnotes\n    const closeFootnote = (id)=>{\n        // Remove the footnote\n        const footnote = document.querySelector(\".dynamic-footnote\");\n        if (footnote) {\n            footnote.remove();\n        }\n        // Remove highlight from the button\n        const button = document.querySelector('[data-footnote-id=\"'.concat(id, '\"]'));\n        if (button) {\n            button.classList.remove(\"footnote-highlight\");\n        }\n    };\n    // Make closeFootnote available globally\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        window.closeFootnote = closeFootnote;\n    }, []);\n    // Function to handle image click and zoom\n    const handleImageClick = (src)=>{\n        setZoomedImage(src);\n    };\n    const closeZoomedImage = ()=>{\n        setZoomedImage(null);\n    };\n    // Get display values from props or parsed metadata\n    const displayTitle = title || (parsedData === null || parsedData === void 0 ? void 0 : parsedData.metadata.title) || \"\";\n    const displayDate = date || (parsedData === null || parsedData === void 0 ? void 0 : parsedData.metadata.date);\n    const displayAuthor = author || (parsedData === null || parsedData === void 0 ? void 0 : parsedData.metadata.author);\n    const displayImage = image || (parsedData === null || parsedData === void 0 ? void 0 : parsedData.metadata.image);\n    const displayDescription = description || (parsedData === null || parsedData === void 0 ? void 0 : parsedData.metadata.description);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"article\", {\n        className: \"prose dark:prose-invert max-w-none\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"relative w-full\",\n                children: [\n                    headings.length > 0 && tocVisible && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"hidden xl:block w-48\",\n                        style: {\n                            position: \"fixed\",\n                            left: \"\".concat(tocPosition.left, \"rem\"),\n                            top: \"\".concat(tocPosition.top, \"rem\"),\n                            zIndex: 10,\n                            maxHeight: \"calc(100vh - 320px)\",\n                            overflow: \"hidden\",\n                            transition: \"top 0.3s ease-out, opacity 0.3s ease-out\",\n                            opacity: tocVisible ? 1 : 0\n                        },\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_TableOfContents__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                            headings: headings\n                        }, void 0, false, {\n                            fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                            lineNumber: 815,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                        lineNumber: 805,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"mx-auto\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"header\", {\n                                className: \"mb-12 text-center\",\n                                children: [\n                                    displayTitle && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                                        className: \"text-6xl md:text-5xl font-medium mb-6 montreal\",\n                                        children: displayTitle\n                                    }, void 0, false, {\n                                        fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                                        lineNumber: 824,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex items-center justify-center gap-4 text-gray-600 dark:text-gray-300 mb-6\",\n                                        children: [\n                                            displayAuthor && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                children: displayAuthor\n                                            }, void 0, false, {\n                                                fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                                                lineNumber: 827,\n                                                columnNumber: 33\n                                            }, this),\n                                            displayAuthor && displayDate && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                children: \"•\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                                                lineNumber: 828,\n                                                columnNumber: 48\n                                            }, this),\n                                            displayDate && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"time\", {\n                                                dateTime: displayDate,\n                                                children: (()=>{\n                                                    const [year, month, day] = displayDate.split(\"-\").map(Number);\n                                                    return new Date(year, month - 1, day).toLocaleDateString();\n                                                })()\n                                            }, void 0, false, {\n                                                fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                                                lineNumber: 830,\n                                                columnNumber: 17\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                                        lineNumber: 826,\n                                        columnNumber: 13\n                                    }, this),\n                                    displayDescription && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        className: \"text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto leading-relaxed\",\n                                        children: displayDescription\n                                    }, void 0, false, {\n                                        fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                                        lineNumber: 839,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                                lineNumber: 822,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"blog-content-container max-w-3xl mx-auto\",\n                                children: contentSegments.map((segment, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        children: segment.type === \"html\" ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            dangerouslySetInnerHTML: {\n                                                __html: segment.content\n                                            }\n                                        }, void 0, false, {\n                                            fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                                            lineNumber: 850,\n                                            columnNumber: 19\n                                        }, this) : segment.type === \"p5sketch\" && segment.p5Sketch ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_P5Sketch__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                                                sketchPath: segment.p5Sketch.sketchPath,\n                                                width: segment.p5Sketch.width,\n                                                height: segment.p5Sketch.height,\n                                                sketchWidth: segment.p5Sketch.sketchWidth,\n                                                sketchHeight: segment.p5Sketch.sketchHeight,\n                                                className: segment.p5Sketch.className\n                                            }, void 0, false, {\n                                                fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                                                lineNumber: 853,\n                                                columnNumber: 21\n                                            }, this)\n                                        }, void 0, false, {\n                                            fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                                            lineNumber: 852,\n                                            columnNumber: 19\n                                        }, this) : segment.type === \"video\" && segment.video ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_Video__WEBPACK_IMPORTED_MODULE_7__.Video, {\n                                                src: segment.video.src,\n                                                width: segment.video.width,\n                                                height: segment.video.height,\n                                                controls: segment.video.controls,\n                                                autoPlay: segment.video.autoPlay,\n                                                muted: segment.video.muted,\n                                                loop: segment.video.loop,\n                                                poster: segment.video.poster,\n                                                className: segment.video.className\n                                            }, void 0, false, {\n                                                fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                                                lineNumber: 864,\n                                                columnNumber: 21\n                                            }, this)\n                                        }, void 0, false, {\n                                            fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                                            lineNumber: 863,\n                                            columnNumber: 19\n                                        }, this) : segment.type === \"pdf\" && segment.pdf ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_PDF__WEBPACK_IMPORTED_MODULE_8__.PDF, {\n                                                src: segment.pdf.src,\n                                                width: segment.pdf.width,\n                                                height: segment.pdf.height,\n                                                className: segment.pdf.className\n                                            }, void 0, false, {\n                                                fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                                                lineNumber: 878,\n                                                columnNumber: 21\n                                            }, this)\n                                        }, void 0, false, {\n                                            fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                                            lineNumber: 877,\n                                            columnNumber: 19\n                                        }, this) : segment.codeBlock && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ui_CodeBlock__WEBPACK_IMPORTED_MODULE_3__.CodeBlock, {\n                                            language: segment.codeBlock.language,\n                                            filename: segment.codeBlock.filename,\n                                            code: segment.codeBlock.code\n                                        }, void 0, false, {\n                                            fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                                            lineNumber: 887,\n                                            columnNumber: 21\n                                        }, this)\n                                    }, index, false, {\n                                        fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                                        lineNumber: 848,\n                                        columnNumber: 15\n                                    }, this))\n                            }, void 0, false, {\n                                fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                                lineNumber: 846,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                        lineNumber: 820,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                lineNumber: 802,\n                columnNumber: 7\n            }, this),\n            zoomedImage && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"fixed top-0 left-0 w-full h-full bg-black bg-opacity-80 z-50 flex items-center justify-center\",\n                onClick: closeZoomedImage,\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_image__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                    src: zoomedImage,\n                    alt: \"Zoomed Image\",\n                    width: 1200,\n                    height: 800,\n                    className: \"rounded-lg cursor-zoom-out\",\n                    style: {\n                        maxWidth: \"90%\",\n                        maxHeight: \"90%\",\n                        objectFit: \"contain\"\n                    },\n                    onClick: closeZoomedImage\n                }, void 0, false, {\n                    fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                    lineNumber: 903,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n                lineNumber: 902,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/davidholcer/GitHub/davidholcer.com_cursored/react-app/src/components/BlogPost.tsx\",\n        lineNumber: 800,\n        columnNumber: 5\n    }, this);\n}\n_s(BlogPost, \"BuQ+K0ZA7wa+AeKpSovZI+UzfWo=\");\n_c = BlogPost;\nvar _c;\n$RefreshReg$(_c, \"BlogPost\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL0Jsb2dQb3N0LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBRW9EO0FBQ3JCO0FBQ1k7QUFDSztBQUNjO0FBQzVCO0FBQ0M7QUFDSjtBQThFaEIsU0FBU1UsU0FBUyxLQUF5RTtRQUF6RSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsV0FBVyxFQUFFQyxJQUFJLEVBQWlCLEdBQXpFOztJQUMvQixNQUFNLENBQUNDLFVBQVVDLFlBQVksR0FBR25CLCtDQUFRQSxDQUFZLEVBQUU7SUFDdEQsTUFBTSxDQUFDb0IsV0FBV0MsYUFBYSxHQUFHckIsK0NBQVFBLENBQWlCLEVBQUU7SUFDN0QsTUFBTSxDQUFDc0Isa0JBQWtCQyxvQkFBb0IsR0FBR3ZCLCtDQUFRQSxDQUEwQixDQUFDO0lBQ25GLE1BQU0sQ0FBQ3dCLGFBQWFDLGVBQWUsR0FBR3pCLCtDQUFRQSxDQUFnQjtJQUM5RCxNQUFNLENBQUMwQixpQkFBaUJDLG1CQUFtQixHQUFHM0IsK0NBQVFBLENBQW1CLEVBQUU7SUFDM0UsTUFBTSxDQUFDNEIsWUFBWUMsY0FBYyxHQUFHN0IsK0NBQVFBLENBQXdCO0lBQ3BFLE1BQU0sQ0FBQzhCLGFBQWFDLGVBQWUsR0FBRy9CLCtDQUFRQSxDQUFDO1FBQUVnQyxLQUFLO1FBQU9DLE1BQU07SUFBRSxJQUFJLHdCQUF3QjtJQUNqRyxNQUFNLENBQUNDLFlBQVlDLGNBQWMsR0FBR25DLCtDQUFRQSxDQUFDO0lBRTdDLHVFQUF1RTtJQUN2RSxNQUFNb0Msc0JBQXNCbEMsNkNBQU1BLENBQTBCLENBQUM7SUFFN0QsNERBQTREO0lBQzVERCxnREFBU0EsQ0FBQztRQUNSLElBQUlvQyxVQUFVO1FBRWQsTUFBTUMsZUFBZTtZQUNuQixJQUFJLENBQUNELFNBQVM7Z0JBQ1pFLHNCQUFzQjtvQkFDcEIsTUFBTUMsVUFBVUMsT0FBT0QsT0FB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O29CQUNMNE4sS0FBSTtvQkFDSm5KLE9BQU87b0JBQ1BFLFFBQVE7b0JBQ1JDLFdBQVU7b0JBQ1ZxRixPQUFPO3dCQUFFNEQsVUFBVTt3QkFBT3BCLFdBQVc7d0JBQU9xQixXQUFXO29CQUFVO29CQUNqRUgsU0FBUzFCOzs7Ozs7Ozs7Ozs7Ozs7OztBQU1yQjtHQTV6QndCL007S0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvQmxvZ1Bvc3QudHN4P2JmZDAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1hZ2UgZnJvbSAnbmV4dC9pbWFnZSc7XG5pbXBvcnQgeyBDb2RlQmxvY2sgfSBmcm9tICcuL3VpL0NvZGVCbG9jayc7XG5pbXBvcnQgVGFibGVPZkNvbnRlbnRzIGZyb20gJy4vVGFibGVPZkNvbnRlbnRzJztcbmltcG9ydCB7IEZvb3Rub3RlUGFuZWwsIHBhcnNlRm9vdG5vdGVzIH0gZnJvbSAnLi91aS9Gb290bm90ZSc7XG5pbXBvcnQgUDVTa2V0Y2ggZnJvbSAnLi9QNVNrZXRjaCc7XG5pbXBvcnQgeyBWaWRlbyB9IGZyb20gJy4vdWkvVmlkZW8nO1xuaW1wb3J0IHsgUERGIH0gZnJvbSAnLi91aS9QREYnO1xuXG5pbnRlcmZhY2UgQmxvZ1Bvc3RQcm9wcyB7XG4gIGNvbnRlbnQ6IHN0cmluZztcbiAgdGl0bGU/OiBzdHJpbmc7XG4gIGRhdGU/OiBzdHJpbmc7XG4gIGF1dGhvcj86IHN0cmluZztcbiAgaW1hZ2U/OiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICBpYW1hPzogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgRm9vdG5vdGUge1xuICBpZDogc3RyaW5nO1xuICBjb250ZW50OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBQYXJzZWRNYXJrZG93biB7XG4gIG1ldGFkYXRhOiB7XG4gICAgdGl0bGU/OiBzdHJpbmc7XG4gICAgZGF0ZT86IHN0cmluZztcbiAgICBpbWFnZT86IHN0cmluZztcbiAgICBpYW1hPzogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgIGF1dGhvcj86IHN0cmluZztcbiAgfTtcbiAgY29udGVudDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgQ29kZUJsb2NrRGF0YSB7XG4gIGxhbmd1YWdlOiBzdHJpbmc7XG4gIGNvZGU6IHN0cmluZztcbiAgZmlsZW5hbWU/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBDb250ZW50U2VnbWVudCB7XG4gIHR5cGU6ICdodG1sJyB8ICdjb2RlYmxvY2snIHwgJ3A1c2tldGNoJyB8ICd2aWRlbycgfCAncGRmJztcbiAgY29udGVudDogc3RyaW5nO1xuICBjb2RlQmxvY2s/OiBDb2RlQmxvY2tEYXRhO1xuICBwNVNrZXRjaD86IHtcbiAgICBza2V0Y2hQYXRoOiBzdHJpbmc7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICBza2V0Y2hXaWR0aD86IG51bWJlcjtcbiAgICBza2V0Y2hIZWlnaHQ/OiBudW1iZXI7XG4gICAgY2xhc3NOYW1lOiBzdHJpbmc7XG4gIH07XG4gIHZpZGVvPzoge1xuICAgIHNyYzogc3RyaW5nO1xuICAgIHdpZHRoPzogc3RyaW5nIHwgbnVtYmVyO1xuICAgIGhlaWdodD86IHN0cmluZyB8IG51bWJlcjtcbiAgICBjb250cm9scz86IGJvb2xlYW47XG4gICAgYXV0b1BsYXk/OiBib29sZWFuO1xuICAgIG11dGVkPzogYm9vbGVhbjtcbiAgICBsb29wPzogYm9vbGVhbjtcbiAgICBwb3N0ZXI/OiBzdHJpbmc7XG4gICAgY2xhc3NOYW1lOiBzdHJpbmc7XG4gIH07XG4gIHBkZj86IHtcbiAgICBzcmM6IHN0cmluZztcbiAgICB3aWR0aD86IHN0cmluZyB8IG51bWJlcjtcbiAgICBoZWlnaHQ/OiBzdHJpbmcgfCBudW1iZXI7XG4gICAgY2xhc3NOYW1lOiBzdHJpbmc7XG4gIH07XG59XG5cbmludGVyZmFjZSBIZWFkaW5nIHtcbiAgaWQ6IHN0cmluZztcbiAgdGV4dDogc3RyaW5nO1xuICBsZXZlbDogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgRm9vdG5vdGVEYXRhIHtcbiAgaWQ6IHN0cmluZztcbiAgdGV4dDogc3RyaW5nO1xuICBjb250ZW50OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJsb2dQb3N0KHsgY29udGVudCwgdGl0bGUsIGRhdGUsIGF1dGhvciwgaW1hZ2UsIGRlc2NyaXB0aW9uLCBpYW1hIH06IEJsb2dQb3N0UHJvcHMpIHtcbiAgY29uc3QgW2hlYWRpbmdzLCBzZXRIZWFkaW5nc10gPSB1c2VTdGF0ZTxIZWFkaW5nW10+KFtdKTtcbiAgY29uc3QgW2Zvb3Rub3Rlcywgc2V0Rm9vdG5vdGVzXSA9IHVzZVN0YXRlPEZvb3Rub3RlRGF0YVtdPihbXSk7XG4gIGNvbnN0IFtmb290bm90ZUNvbnRlbnRzLCBzZXRGb290bm90ZUNvbnRlbnRzXSA9IHVzZVN0YXRlPHtba2V5OiBzdHJpbmddOiBzdHJpbmd9Pih7fSk7XG4gIGNvbnN0IFt6b29tZWRJbWFnZSwgc2V0Wm9vbWVkSW1hZ2VdID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtjb250ZW50U2VnbWVudHMsIHNldENvbnRlbnRTZWdtZW50c10gPSB1c2VTdGF0ZTxDb250ZW50U2VnbWVudFtdPihbXSk7XG4gIGNvbnN0IFtwYXJzZWREYXRhLCBzZXRQYXJzZWREYXRhXSA9IHVzZVN0YXRlPFBhcnNlZE1hcmtkb3duIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFt0b2NQb3NpdGlvbiwgc2V0VG9jUG9zaXRpb25dID0gdXNlU3RhdGUoeyB0b3A6IDE4Ljc1LCBsZWZ0OiA4IH0pOyAvLyAzMDBweCAvIDE2ID0gMTguNzVyZW1cbiAgY29uc3QgW3RvY1Zpc2libGUsIHNldFRvY1Zpc2libGVdID0gdXNlU3RhdGUodHJ1ZSk7XG4gIFxuICAvLyBTdG9yZSBmb290bm90ZSBjb250ZW50cyBpbiBhIHJlZiB0byBhdm9pZCBzdGF0ZSB1cGRhdGUgdGltaW5nIGlzc3Vlc1xuICBjb25zdCBmb290bm90ZUNvbnRlbnRzUmVmID0gdXNlUmVmPHtba2V5OiBzdHJpbmddOiBzdHJpbmd9Pih7fSk7XG5cbiAgLy8gVHJhY2sgc2Nyb2xsIHBvc2l0aW9uIGZvciBUT0MgcG9zaXRpb25pbmcgd2l0aCB0aHJvdHRsaW5nXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IHRpY2tpbmcgPSBmYWxzZTtcbiAgICBcbiAgICBjb25zdCBoYW5kbGVTY3JvbGwgPSAoKSA9PiB7XG4gICAgICBpZiAoIXRpY2tpbmcpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBjb25zdCBzY3JvbGxZID0gd2luZG93LnNjcm9sbFk7XG4gICAgICAgICAgY29uc3Qgd2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICAgIGNvbnN0IHRvY0hlaWdodCA9IDQwMDsgLy8gQXBwcm94aW1hdGUgVE9DIGhlaWdodFxuICAgICAgICAgIGNvbnN0IGZvb3RlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Zvb3RlcicpO1xuICAgICAgICAgIFxuICAgICAgICAgIGNvbnNvbGUubG9nKCdTY3JvbGwgZXZlbnQgdHJpZ2dlcmVkOicsIHsgc2Nyb2xsWSwgd2luZG93SGVpZ2h0IH0pO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIEJhc2UgcG9zaXRpb24gLSBzdGFydHMgbG93ZXIgYW5kIG1vdmVzIHdpdGggc2Nyb2xsIGJ1dCBzdGF5cyB3aXRoaW4gYm91bmRzXG4gICAgICAgICAgbGV0IGJhc2VUb3AgPSAzMDAgKyAoc2Nyb2xsWSAqIDAuMTUpOyAvLyBTdGFydCBsb3dlciBhbmQgbW92ZSB3aXRoIHNjcm9sbCBhdCAxNSUgcmF0ZVxuICAgICAgICAgIFxuICAgICAgICAgIGNvbnNvbGUubG9nKCdCYXNlIHRvcCBwb3NpdGlvbjonLCBiYXNlVG9wKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBFbnN1cmUgVE9DIGRvZXNuJ3QgZ28gdG9vIGhpZ2hcbiAgICAgICAgICBjb25zdCBtaW5Ub3AgPSAyMDA7IC8vIEhpZ2hlciBtaW5pbXVtIHRvcCBwb3NpdGlvblxuICAgICAgICAgIGJhc2VUb3AgPSBNYXRoLm1heChtaW5Ub3AsIGJhc2VUb3ApO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIENoZWNrIGlmIFRPQyB3b3VsZCBvdmVybGFwIHdpdGggZm9vdGVyXG4gICAgICAgICAgbGV0IHNob3VsZEhpZGUgPSBmYWxzZTtcbiAgICAgICAgICBpZiAoZm9vdGVyKSB7XG4gICAgICAgICAgICBjb25zdCBmb290ZXJSZWN0ID0gZm9vdGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgY29uc3QgZm9vdGVyVG9wID0gZm9vdGVyUmVjdC50b3A7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIElmIFRPQyB3b3VsZCBvdmVybGFwIHdpdGggZm9vdGVyLCBoaWRlIGl0XG4gICAgICAgICAgICBpZiAoYmFzZVRvcCArIHRvY0hlaWdodCA+IGZvb3RlclRvcCAtIDIwKSB7XG4gICAgICAgICAgICAgIHNob3VsZEhpZGUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBBbHNvIGhpZGUgaWYgVE9DIHdvdWxkIGdvIGJlbG93IHZpZXdwb3J0XG4gICAgICAgICAgaWYgKGJhc2VUb3AgKyB0b2NIZWlnaHQgPiB3aW5kb3dIZWlnaHQgLSA0MCkge1xuICAgICAgICAgICAgc2hvdWxkSGlkZSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIENvbnZlcnQgdG8gcmVtIHVuaXRzIGZvciBjb25zaXN0ZW5jeVxuICAgICAgICAgIGNvbnN0IHRvcEluUmVtID0gYmFzZVRvcCAvIDE2O1xuICAgICAgICAgIFxuICAgICAgICAgIGNvbnNvbGUubG9nKCdTZXR0aW5nIFRPQyBwb3NpdGlvbjonLCB7IHRvcDogdG9wSW5SZW0sIGxlZnQ6IDgsIHNob3VsZEhpZGUgfSk7XG4gICAgICAgICAgXG4gICAgICAgICAgc2V0VG9jUG9zaXRpb24oeyB0b3A6IHRvcEluUmVtLCBsZWZ0OiA4IH0pO1xuICAgICAgICAgIHNldFRvY1Zpc2libGUoIXNob3VsZEhpZGUpO1xuICAgICAgICAgIFxuICAgICAgICAgIHRpY2tpbmcgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRpY2tpbmcgPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBJbml0aWFsIGNhbGwgdG8gc2V0IHBvc2l0aW9uXG4gICAgaGFuZGxlU2Nyb2xsKCk7XG5cbiAgICAvLyBVc2UgbG9jb21vdGl2ZSBzY3JvbGwgY29udGFpbmVyIGlmIGF2YWlsYWJsZVxuICAgIGNvbnN0IHNjcm9sbENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXNjcm9sbC1jb250YWluZXJdJyk7XG4gICAgaWYgKHNjcm9sbENvbnRhaW5lcikge1xuICAgICAgY29uc29sZS5sb2coJ1VzaW5nIGxvY29tb3RpdmUgc2Nyb2xsIGNvbnRhaW5lcicpO1xuICAgICAgc2Nyb2xsQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGhhbmRsZVNjcm9sbCk7XG4gICAgICByZXR1cm4gKCkgPT4gc2Nyb2xsQ29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGhhbmRsZVNjcm9sbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCdVc2luZyB3aW5kb3cgc2Nyb2xsJyk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaGFuZGxlU2Nyb2xsLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICByZXR1cm4gKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGhhbmRsZVNjcm9sbCk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgLy8gUGFyc2UgbWFya2Rvd24gZnJvbnRtYXR0ZXIgYW5kIGNvbnRlbnRcbiAgY29uc3QgcGFyc2VNYXJrZG93biA9IChtYXJrZG93bkNvbnRlbnQ6IHN0cmluZyk6IFBhcnNlZE1hcmtkb3duID0+IHtcbiAgICBjb25zdCBmcm9udG1hdHRlclJlZ2V4ID0gL15cXCtcXCtcXCtcXHMqXFxuKFtcXHNcXFNdKj8pXFxuXFwrXFwrXFwrXFxzKlxcbihbXFxzXFxTXSopJC87XG4gICAgY29uc3QgbWF0Y2ggPSBtYXJrZG93bkNvbnRlbnQubWF0Y2goZnJvbnRtYXR0ZXJSZWdleCk7XG4gICAgXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBjb25zdCBmcm9udG1hdHRlciA9IG1hdGNoWzFdO1xuICAgICAgY29uc3QgY29udGVudCA9IG1hdGNoWzJdO1xuICAgICAgXG4gICAgICAvLyBQYXJzZSBmcm9udG1hdHRlclxuICAgICAgY29uc3QgbWV0YWRhdGE6IGFueSA9IHt9O1xuICAgICAgY29uc3QgbGluZXMgPSBmcm9udG1hdHRlci5zcGxpdCgnXFxuJykuZmlsdGVyKGxpbmUgPT4gbGluZS50cmltKCkpO1xuICAgICAgbGluZXMuZm9yRWFjaChsaW5lID0+IHtcbiAgICAgICAgY29uc3QgZXF1YWxJbmRleCA9IGxpbmUuaW5kZXhPZignID0gJyk7XG4gICAgICAgIGlmIChlcXVhbEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIGNvbnN0IGtleSA9IGxpbmUuc3Vic3RyaW5nKDAsIGVxdWFsSW5kZXgpLnRyaW0oKTtcbiAgICAgICAgICBsZXQgdmFsdWUgPSBsaW5lLnN1YnN0cmluZyhlcXVhbEluZGV4ICsgMykudHJpbSgpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFJlbW92ZSBxdW90ZXMgaWYgcHJlc2VudFxuICAgICAgICAgIGlmICh2YWx1ZS5zdGFydHNXaXRoKCdcIicpICYmIHZhbHVlLmVuZHNXaXRoKCdcIicpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgbWV0YWRhdGFba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHsgbWV0YWRhdGEsIGNvbnRlbnQgfTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHsgbWV0YWRhdGE6IHt9LCBjb250ZW50OiBtYXJrZG93bkNvbnRlbnQgfTtcbiAgfTtcblxuICAvLyBQcm9jZXNzIGlubGluZSBjb2RlXG4gIGNvbnN0IHByb2Nlc3NJbmxpbmVDb2RlID0gKGNvbnRlbnQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgY29uc3QgaW5saW5lQ29kZVJlZ2V4ID0gL2AoW15gXSspYC9nO1xuICAgIHJldHVybiBjb250ZW50LnJlcGxhY2UoaW5saW5lQ29kZVJlZ2V4LCAnPGNvZGUgY2xhc3M9XCJpbmxpbmUtY29kZVwiPiQxPC9jb2RlPicpO1xuICB9O1xuXG4gIC8vIFBhcnNlIFA1U2tldGNoIGNvbXBvbmVudHNcbiAgY29uc3QgcGFyc2VQNVNrZXRjaENvbXBvbmVudHMgPSAoY29udGVudDogc3RyaW5nKTogQ29udGVudFNlZ21lbnRbXSA9PiB7XG4gICAgY29uc3Qgc2VnbWVudHM6IENvbnRlbnRTZWdtZW50W10gPSBbXTtcbiAgICAvLyBTaW1wbGVyIHJlZ2V4IHRoYXQgbWF0Y2hlcyB0aGUgYmFzaWMgc3RydWN0dXJlIGZpcnN0XG4gICAgY29uc3QgcDVTa2V0Y2hSZWdleCA9IC88UDVTa2V0Y2hcXHMrc2tldGNoUGF0aD1cIihbXlwiXSspXCJcXHMrd2lkdGg9eyhcXGQrKX1cXHMraGVpZ2h0PXsoXFxkKyl9W14+XSpjbGFzc05hbWU9XCIoW15cIl0rKVwiXFxzKlxcLz4vZztcbiAgICBcbiAgICAgICAgbGV0IGxhc3RJbmRleCA9IDA7XG4gICAgbGV0IG1hdGNoO1xuICAgIFxuICAgIHdoaWxlICgobWF0Y2ggPSBwNVNrZXRjaFJlZ2V4LmV4ZWMoY29udGVudCkpICE9PSBudWxsKSB7XG4gICAgICAvLyBBZGQgY29udGVudCBiZWZvcmUgdGhlIFA1U2tldGNoIGNvbXBvbmVudFxuICAgICAgaWYgKG1hdGNoLmluZGV4ID4gbGFzdEluZGV4KSB7XG4gICAgICAgIGNvbnN0IGJlZm9yZUNvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZyhsYXN0SW5kZXgsIG1hdGNoLmluZGV4KTtcbiAgICAgICAgaWYgKGJlZm9yZUNvbnRlbnQudHJpbSgpKSB7XG4gICAgICAgICAgc2VnbWVudHMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiAnaHRtbCcsXG4gICAgICAgICAgICBjb250ZW50OiBiZWZvcmVDb250ZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gUGFyc2UgdGhlIFA1U2tldGNoIHByb3BzXG4gICAgICBjb25zdCBwNVNrZXRjaFByb3BzOiB7XG4gICAgICAgIHNrZXRjaFBhdGg6IHN0cmluZztcbiAgICAgICAgd2lkdGg6IG51bWJlcjtcbiAgICAgICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgICAgIHNrZXRjaFdpZHRoPzogbnVtYmVyO1xuICAgICAgICBza2V0Y2hIZWlnaHQ/OiBudW1iZXI7XG4gICAgICAgIGNsYXNzTmFtZTogc3RyaW5nO1xuICAgICAgfSA9IHtcbiAgICAgICAgc2tldGNoUGF0aDogbWF0Y2hbMV0sXG4gICAgICAgIHdpZHRoOiBwYXJzZUludChtYXRjaFsyXSksXG4gICAgICAgIGhlaWdodDogcGFyc2VJbnQobWF0Y2hbM10pLFxuICAgICAgICBjbGFzc05hbWU6IG1hdGNoWzRdXG4gICAgICB9O1xuICAgICAgXG4gICAgICAvLyBFeHRyYWN0IHNrZXRjaFdpZHRoIGFuZCBza2V0Y2hIZWlnaHQgZnJvbSB0aGUgZnVsbCBtYXRjaCBpZiB0aGV5IGV4aXN0XG4gICAgICBjb25zdCBmdWxsTWF0Y2ggPSBtYXRjaFswXTtcbiAgICAgIGNvbnN0IHNrZXRjaFdpZHRoTWF0Y2ggPSBmdWxsTWF0Y2gubWF0Y2goL3NrZXRjaFdpZHRoPXsoXFxkKyl9Lyk7XG4gICAgICBjb25zdCBza2V0Y2hIZWlnaHRNYXRjaCA9IGZ1bGxNYXRjaC5tYXRjaCgvc2tldGNoSGVpZ2h0PXsoXFxkKyl9Lyk7XG4gICAgICBcbiAgICAgIGlmIChza2V0Y2hXaWR0aE1hdGNoICYmIHNrZXRjaEhlaWdodE1hdGNoKSB7XG4gICAgICAgIHA1U2tldGNoUHJvcHMuc2tldGNoV2lkdGggPSBwYXJzZUludChza2V0Y2hXaWR0aE1hdGNoWzFdKTtcbiAgICAgICAgcDVTa2V0Y2hQcm9wcy5za2V0Y2hIZWlnaHQgPSBwYXJzZUludChza2V0Y2hIZWlnaHRNYXRjaFsxXSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEFkZCB0aGUgUDVTa2V0Y2ggY29tcG9uZW50XG4gICAgICBzZWdtZW50cy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ3A1c2tldGNoJyxcbiAgICAgICAgY29udGVudDogJycsXG4gICAgICAgIHA1U2tldGNoOiBwNVNrZXRjaFByb3BzXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gICAgfVxuICAgIFxuICAgIC8vIEFkZCByZW1haW5pbmcgY29udGVudCBhZnRlciB0aGUgbGFzdCBQNVNrZXRjaCBjb21wb25lbnRcbiAgICBpZiAobGFzdEluZGV4IDwgY29udGVudC5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGFmdGVyQ29udGVudCA9IGNvbnRlbnQuc3Vic3RyaW5nKGxhc3RJbmRleCk7XG4gICAgICBpZiAoYWZ0ZXJDb250ZW50LnRyaW0oKSkge1xuICAgICAgICBzZWdtZW50cy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnaHRtbCcsXG4gICAgICAgICAgY29udGVudDogYWZ0ZXJDb250ZW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gc2VnbWVudHM7XG4gIH07XG5cbiAgLy8gUGFyc2UgVmlkZW8gY29tcG9uZW50cyAtIHNpbXBsaWZpZWQgZm9yIFNhZmFyaVxuICBjb25zdCBwYXJzZVZpZGVvQ29tcG9uZW50cyA9IChjb250ZW50OiBzdHJpbmcpOiBDb250ZW50U2VnbWVudFtdID0+IHtcbiAgICBjb25zdCBzZWdtZW50czogQ29udGVudFNlZ21lbnRbXSA9IFtdO1xuICAgIGNvbnN0IHZpZGVvUmVnZXggPSAvPFZpZGVvXFxzK3NyYz1cIihbXlwiXSspXCJbXj5dKmNsYXNzTmFtZT1cIihbXlwiXSspXCJcXHMqXFwvPi9nO1xuICAgIFxuICAgIGxldCBsYXN0SW5kZXggPSAwO1xuICAgIGxldCBtYXRjaDtcbiAgICBcbiAgICB3aGlsZSAoKG1hdGNoID0gdmlkZW9SZWdleC5leGVjKGNvbnRlbnQpKSAhPT0gbnVsbCkge1xuICAgICAgLy8gQWRkIGNvbnRlbnQgYmVmb3JlIHRoZSBWaWRlbyBjb21wb25lbnRcbiAgICAgIGlmIChtYXRjaC5pbmRleCA+IGxhc3RJbmRleCkge1xuICAgICAgICBjb25zdCBiZWZvcmVDb250ZW50ID0gY29udGVudC5zdWJzdHJpbmcobGFzdEluZGV4LCBtYXRjaC5pbmRleCk7XG4gICAgICAgIGlmIChiZWZvcmVDb250ZW50LnRyaW0oKSkge1xuICAgICAgICAgIHNlZ21lbnRzLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogJ2h0bWwnLFxuICAgICAgICAgICAgY29udGVudDogYmVmb3JlQ29udGVudFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFBhcnNlIHRoZSBWaWRlbyBwcm9wcyAtIHNpbXBsaWZpZWRcbiAgICAgIGNvbnN0IGZ1bGxNYXRjaCA9IG1hdGNoWzBdO1xuICAgICAgY29uc3QgdmlkZW9Qcm9wczoge1xuICAgICAgICBzcmM6IHN0cmluZztcbiAgICAgICAgd2lkdGg/OiBzdHJpbmcgfCBudW1iZXI7XG4gICAgICAgIGhlaWdodD86IHN0cmluZyB8IG51bWJlcjtcbiAgICAgICAgY29udHJvbHM/OiBib29sZWFuO1xuICAgICAgICBhdXRvUGxheT86IGJvb2xlYW47XG4gICAgICAgIG11dGVkPzogYm9vbGVhbjtcbiAgICAgICAgbG9vcD86IGJvb2xlYW47XG4gICAgICAgIHBvc3Rlcj86IHN0cmluZztcbiAgICAgICAgY2xhc3NOYW1lOiBzdHJpbmc7XG4gICAgICB9ID0ge1xuICAgICAgICBzcmM6IG1hdGNoWzFdLFxuICAgICAgICBjbGFzc05hbWU6IG1hdGNoWzJdXG4gICAgICB9O1xuICAgICAgXG4gICAgICAvLyBFeHRyYWN0IGFkZGl0aW9uYWwgcHJvcHMgZnJvbSB0aGUgZnVsbCBtYXRjaFxuICAgICAgY29uc3Qgd2lkdGhNYXRjaCA9IGZ1bGxNYXRjaC5tYXRjaCgvd2lkdGg9XCIoW15cIl0rKVwiLyk7XG4gICAgICBjb25zdCBoZWlnaHRNYXRjaCA9IGZ1bGxNYXRjaC5tYXRjaCgvaGVpZ2h0PVwiKFteXCJdKylcIi8pO1xuICAgICAgY29uc3QgY29udHJvbHNNYXRjaCA9IGZ1bGxNYXRjaC5tYXRjaCgvY29udHJvbHM9eyhbXn1dKyl9Lyk7XG4gICAgICBjb25zdCBhdXRvUGxheU1hdGNoID0gZnVsbE1hdGNoLm1hdGNoKC9hdXRvUGxheT17KFtefV0rKX0vKTtcbiAgICAgIGNvbnN0IG11dGVkTWF0Y2ggPSBmdWxsTWF0Y2gubWF0Y2goL211dGVkPXsoW159XSspfS8pO1xuICAgICAgY29uc3QgbG9vcE1hdGNoID0gZnVsbE1hdGNoLm1hdGNoKC9sb29wPXsoW159XSspfS8pO1xuICAgICAgY29uc3QgcG9zdGVyTWF0Y2ggPSBmdWxsTWF0Y2gubWF0Y2goL3Bvc3Rlcj1cIihbXlwiXSspXCIvKTtcbiAgICAgIFxuICAgICAgaWYgKHdpZHRoTWF0Y2gpIHZpZGVvUHJvcHMud2lkdGggPSB3aWR0aE1hdGNoWzFdO1xuICAgICAgaWYgKGhlaWdodE1hdGNoKSB2aWRlb1Byb3BzLmhlaWdodCA9IGhlaWdodE1hdGNoWzFdO1xuICAgICAgaWYgKGNvbnRyb2xzTWF0Y2gpIHZpZGVvUHJvcHMuY29udHJvbHMgPSBjb250cm9sc01hdGNoWzFdID09PSAndHJ1ZSc7XG4gICAgICBpZiAoYXV0b1BsYXlNYXRjaCkgdmlkZW9Qcm9wcy5hdXRvUGxheSA9IGF1dG9QbGF5TWF0Y2hbMV0gPT09ICd0cnVlJztcbiAgICAgIGlmIChtdXRlZE1hdGNoKSB2aWRlb1Byb3BzLm11dGVkID0gbXV0ZWRNYXRjaFsxXSA9PT0gJ3RydWUnO1xuICAgICAgaWYgKGxvb3BNYXRjaCkgdmlkZW9Qcm9wcy5sb29wID0gbG9vcE1hdGNoWzFdID09PSAndHJ1ZSc7XG4gICAgICBpZiAocG9zdGVyTWF0Y2gpIHZpZGVvUHJvcHMucG9zdGVyID0gcG9zdGVyTWF0Y2hbMV07XG4gICAgICBcbiAgICAgIC8vIEFkZCB0aGUgVmlkZW8gY29tcG9uZW50XG4gICAgICBzZWdtZW50cy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ3ZpZGVvJyxcbiAgICAgICAgY29udGVudDogJycsXG4gICAgICAgIHZpZGVvOiB2aWRlb1Byb3BzXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gICAgfVxuICAgIFxuICAgIC8vIEFkZCByZW1haW5pbmcgY29udGVudCBhZnRlciB0aGUgbGFzdCBWaWRlbyBjb21wb25lbnRcbiAgICBpZiAobGFzdEluZGV4IDwgY29udGVudC5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGFmdGVyQ29udGVudCA9IGNvbnRlbnQuc3Vic3RyaW5nKGxhc3RJbmRleCk7XG4gICAgICBpZiAoYWZ0ZXJDb250ZW50LnRyaW0oKSkge1xuICAgICAgICBzZWdtZW50cy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnaHRtbCcsXG4gICAgICAgICAgY29udGVudDogYWZ0ZXJDb250ZW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gc2VnbWVudHM7XG4gIH07XG5cbiAgLy8gUGFyc2UgUERGIGNvbXBvbmVudHNcbiAgY29uc3QgcGFyc2VQREZDb21wb25lbnRzID0gKGNvbnRlbnQ6IHN0cmluZyk6IENvbnRlbnRTZWdtZW50W10gPT4ge1xuICAgIGNvbnN0IHNlZ21lbnRzOiBDb250ZW50U2VnbWVudFtdID0gW107XG4gICAgY29uc3QgcGRmUmVnZXggPSAvPFBERlxccytzcmM9XCIoW15cIl0rKVwiW14+XSpjbGFzc05hbWU9XCIoW15cIl0rKVwiXFxzKlxcLz4vZztcbiAgICBcbiAgICBsZXQgbGFzdEluZGV4ID0gMDtcbiAgICBsZXQgbWF0Y2g7XG4gICAgXG4gICAgd2hpbGUgKChtYXRjaCA9IHBkZlJlZ2V4LmV4ZWMoY29udGVudCkpICE9PSBudWxsKSB7XG4gICAgICAvLyBBZGQgY29udGVudCBiZWZvcmUgdGhlIFBERiBjb21wb25lbnRcbiAgICAgIGlmIChtYXRjaC5pbmRleCA+IGxhc3RJbmRleCkge1xuICAgICAgICBjb25zdCBiZWZvcmVDb250ZW50ID0gY29udGVudC5zdWJzdHJpbmcobGFzdEluZGV4LCBtYXRjaC5pbmRleCk7XG4gICAgICAgIGlmIChiZWZvcmVDb250ZW50LnRyaW0oKSkge1xuICAgICAgICAgIHNlZ21lbnRzLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogJ2h0bWwnLFxuICAgICAgICAgICAgY29udGVudDogYmVmb3JlQ29udGVudFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFBhcnNlIHRoZSBQREYgcHJvcHNcbiAgICAgIGNvbnN0IGZ1bGxNYXRjaCA9IG1hdGNoWzBdO1xuICAgICAgY29uc3QgcGRmUHJvcHM6IHtcbiAgICAgICAgc3JjOiBzdHJpbmc7XG4gICAgICAgIHdpZHRoPzogc3RyaW5nIHwgbnVtYmVyO1xuICAgICAgICBoZWlnaHQ/OiBzdHJpbmcgfCBudW1iZXI7XG4gICAgICAgIHBhZ2VOdW1iZXI/OiBudW1iZXI7XG4gICAgICAgIHNjYWxlPzogbnVtYmVyO1xuICAgICAgICBjbGFzc05hbWU6IHN0cmluZztcbiAgICAgIH0gPSB7XG4gICAgICAgIHNyYzogbWF0Y2hbMV0sXG4gICAgICAgIGNsYXNzTmFtZTogbWF0Y2hbMl1cbiAgICAgIH07XG4gICAgICBcbiAgICAgIC8vIEV4dHJhY3QgYWRkaXRpb25hbCBwcm9wcyBmcm9tIHRoZSBmdWxsIG1hdGNoXG4gICAgICBjb25zdCB3aWR0aE1hdGNoID0gZnVsbE1hdGNoLm1hdGNoKC93aWR0aD1cIihbXlwiXSspXCIvKTtcbiAgICAgIGNvbnN0IGhlaWdodE1hdGNoID0gZnVsbE1hdGNoLm1hdGNoKC9oZWlnaHQ9XCIoW15cIl0rKVwiLyk7XG4gICAgICBcbiAgICAgIGlmICh3aWR0aE1hdGNoKSBwZGZQcm9wcy53aWR0aCA9IHdpZHRoTWF0Y2hbMV07XG4gICAgICBpZiAoaGVpZ2h0TWF0Y2gpIHBkZlByb3BzLmhlaWdodCA9IGhlaWdodE1hdGNoWzFdO1xuICAgICAgXG4gICAgICAvLyBBZGQgdGhlIFBERiBjb21wb25lbnRcbiAgICAgIHNlZ21lbnRzLnB1c2goe1xuICAgICAgICB0eXBlOiAncGRmJyxcbiAgICAgICAgY29udGVudDogJycsXG4gICAgICAgIHBkZjogcGRmUHJvcHNcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBsYXN0SW5kZXggPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgICB9XG4gICAgXG4gICAgLy8gQWRkIHJlbWFpbmluZyBjb250ZW50IGFmdGVyIHRoZSBsYXN0IFBERiBjb21wb25lbnRcbiAgICBpZiAobGFzdEluZGV4IDwgY29udGVudC5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGFmdGVyQ29udGVudCA9IGNvbnRlbnQuc3Vic3RyaW5nKGxhc3RJbmRleCk7XG4gICAgICBpZiAoYWZ0ZXJDb250ZW50LnRyaW0oKSkge1xuICAgICAgICBzZWdtZW50cy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnaHRtbCcsXG4gICAgICAgICAgY29udGVudDogYWZ0ZXJDb250ZW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gc2VnbWVudHM7XG4gIH07XG5cbiAgLy8gQ29udmVydCBtYXJrZG93biB0byBIVE1MIGFuZCBleHRyYWN0IGNvZGUgYmxvY2tzXG4gIGNvbnN0IHByb2Nlc3NNYXJrZG93biA9IChjb250ZW50OiBzdHJpbmcpOiBDb250ZW50U2VnbWVudFtdID0+IHtcbiAgICBsZXQgcHJvY2Vzc2VkID0gY29udGVudDtcbiAgICBjb25zdCBzZWdtZW50czogQ29udGVudFNlZ21lbnRbXSA9IFtdO1xuICAgIGNvbnN0IGNvZGVCbG9ja3M6IENvZGVCbG9ja0RhdGFbXSA9IFtdO1xuICAgIFxuICAgIC8vIFByb2Nlc3MgZm9vdG5vdGVzIEJFRk9SRSBzcGxpdHRpbmcgYnkgY29kZSBibG9ja3NcbiAgICBjb25zdCBmb290bm90ZVJlZ2V4ID0gLzxmb290bm90ZSBpZD1cIihcXGQrKVwiIHRleHQ9XCIoW15cIl0rKVwiIGNvbnRlbnQ9XCIoW15cIl0qPylcIj48XFwvZm9vdG5vdGU+L2c7XG4gICAgbGV0IGZvb3Rub3RlTWF0Y2g7XG4gICAgXG4gICAgY29uc29sZS5sb2coJz09PSBQUk9DRVNTTUFSS0RPV04gRk9PVE5PVEUgREVCVUcgPT09Jyk7XG4gICAgY29uc29sZS5sb2coJ0xvb2tpbmcgZm9yIGZvb3Rub3RlcyBpbiBwcm9jZXNzZWQgY29udGVudC4uLicpO1xuICAgIFxuICAgIC8vIEZpbmQgYWxsIGZvb3Rub3RlIGVsZW1lbnRzIGZpcnN0XG4gICAgY29uc3QgYWxsRm9vdG5vdGVzID0gcHJvY2Vzc2VkLm1hdGNoKC88Zm9vdG5vdGVbXj5dKj48XFwvZm9vdG5vdGU+L2cpO1xuICAgIGNvbnNvbGUubG9nKCdBbGwgZm9vdG5vdGUgZWxlbWVudHMgZm91bmQ6JywgYWxsRm9vdG5vdGVzKTtcbiAgICBcbiAgICAvLyBQcm9jZXNzIGVhY2ggZm9vdG5vdGUgbWFudWFsbHlcbiAgICBsZXQgZm9vdG5vdGVDb3VudCA9IDA7XG4gICAgYWxsRm9vdG5vdGVzPy5mb3JFYWNoKChmb290bm90ZUVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICAvLyBFeHRyYWN0IGlkLCB0ZXh0LCBhbmQgY29udGVudCB1c2luZyBhIG1vcmUgcm9idXN0IGFwcHJvYWNoXG4gICAgICBjb25zdCBpZE1hdGNoID0gZm9vdG5vdGVFbGVtZW50Lm1hdGNoKC9pZD1cIihcXGQrKVwiLyk7XG4gICAgICBjb25zdCB0ZXh0TWF0Y2ggPSBmb290bm90ZUVsZW1lbnQubWF0Y2goL3RleHQ9XCIoW15cIl0rKVwiLyk7XG4gICAgICBjb25zdCBjb250ZW50TWF0Y2ggPSBmb290bm90ZUVsZW1lbnQubWF0Y2goL2NvbnRlbnQ9XCIoW15cIl0rKVwiLyk7XG4gICAgICBcbiAgICAgIGlmIChpZE1hdGNoICYmIHRleHRNYXRjaCAmJiBjb250ZW50TWF0Y2gpIHtcbiAgICAgICAgY29uc3QgaWQgPSBpZE1hdGNoWzFdO1xuICAgICAgICBjb25zdCB0ZXh0ID0gdGV4dE1hdGNoWzFdO1xuICAgICAgICBjb25zdCBlbmNvZGVkQ29udGVudCA9IGNvbnRlbnRNYXRjaFsxXTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgIGZvb3Rub3RlQ291bnQrKztcbiAgICAgICAgIC8vIERlY29kZSB0aGUgY29udGVudCBhbmQgc3RvcmUgaW4gcmVmXG4gICAgICAgICBjb25zdCBkZWNvZGVkQ29udGVudCA9IGRlY29kZVVSSUNvbXBvbmVudChlbmNvZGVkQ29udGVudCk7XG4gICAgICAgICBmb290bm90ZUNvbnRlbnRzUmVmLmN1cnJlbnRbaWRdID0gZGVjb2RlZENvbnRlbnQ7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIHRoZSBmb290bm90ZSBlbGVtZW50XG4gICAgICAgICBjb25zdCByZXBsYWNlbWVudCA9IGA8c3BhbiBjbGFzcz1cImZvb3Rub3RlLXdyYXBwZXJcIj48YnV0dG9uIGNsYXNzPVwiZm9vdG5vdGUtYnV0dG9uXCIgZGF0YS1mb290bm90ZS1pZD1cIiR7aWR9XCI+JHtpZH08L2J1dHRvbj48L3NwYW4+YDtcbiAgICAgICAgIHByb2Nlc3NlZCA9IHByb2Nlc3NlZC5yZXBsYWNlKGZvb3Rub3RlRWxlbWVudCwgcmVwbGFjZW1lbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKGBUb3RhbCBmb290bm90ZXMgcHJvY2Vzc2VkIGluIHByb2Nlc3NNYXJrZG93bjogJHtmb290bm90ZUNvdW50fWApO1xuICAgIFxuICAgIC8vIFNwbGl0IGNvbnRlbnQgYnkgY29kZSBibG9ja3NcbiAgICBjb25zdCBwYXJ0cyA9IHByb2Nlc3NlZC5zcGxpdCgvKGBgYFtcXHddKlxcbltcXHNcXFNdKj9gYGApL2cpO1xuICAgIGNvbnNvbGUubG9nKCdDb250ZW50IHNwbGl0IGludG8nLCBwYXJ0cy5sZW5ndGgsICdwYXJ0cycpO1xuICAgIHBhcnRzLmZvckVhY2goKHBhcnQsIGluZGV4KSA9PiB7XG4gICAgICBpZiAocGFydC5pbmNsdWRlcygnZm9vdG5vdGUtd3JhcHBlcicpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBQYXJ0ICR7aW5kZXh9IGNvbnRhaW5zIGZvb3Rub3RlczpgLCBwYXJ0LnN1YnN0cmluZygwLCAyMDApKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICBwYXJ0cy5mb3JFYWNoKChwYXJ0LCBpbmRleCkgPT4ge1xuICAgICAgaWYgKHBhcnQuc3RhcnRzV2l0aCgnYGBgJykpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBhIGNvZGUgYmxvY2tcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBwYXJ0Lm1hdGNoKC9gYGAoXFx3Kyk/XFxuKFtcXHNcXFNdKj8pYGBgLyk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIGNvbnN0IGxhbmd1YWdlID0gbWF0Y2hbMV0gfHwgJ3RleHQnO1xuICAgICAgICAgIGNvbnN0IGNvZGUgPSBtYXRjaFsyXS50cmltKCk7XG4gICAgICAgICAgXG4gICAgICAgICAgY29uc3QgY29kZUJsb2NrOiBDb2RlQmxvY2tEYXRhID0ge1xuICAgICAgICAgICAgbGFuZ3VhZ2UsXG4gICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgZmlsZW5hbWU6IGBleGFtcGxlLiR7bGFuZ3VhZ2UgPT09ICdqYXZhc2NyaXB0JyB8fCBsYW5ndWFnZSA9PT0gJ2pzJyA/ICdqcycgOiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZSA9PT0gJ3R5cGVzY3JpcHQnIHx8IGxhbmd1YWdlID09PSAndHMnID8gJ3RzJyA6IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlID09PSAnanN4JyA/ICdqc3gnIDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2UgPT09ICd0c3gnID8gJ3RzeCcgOiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZSA9PT0gJ2h0bWwnID8gJ2h0bWwnIDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2UgPT09ICdjc3MnID8gJ2NzcycgOiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZSA9PT0gJ3B5dGhvbicgPyAncHknIDogbGFuZ3VhZ2V9YFxuICAgICAgICAgIH07XG4gICAgICAgICAgXG4gICAgICAgICAgc2VnbWVudHMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiAnY29kZWJsb2NrJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6ICcnLFxuICAgICAgICAgICAgY29kZUJsb2NrXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFydC50cmltKCkpIHtcbiAgICAgICAgLy8gVGhpcyBpcyByZWd1bGFyIGNvbnRlbnRcbiAgICAgICAgbGV0IGh0bWxDb250ZW50ID0gcGFydDtcbiAgICAgICAgXG4gICAgICAgIC8vIFByb2Nlc3MgaW5saW5lIGNvZGVcbiAgICAgICAgaHRtbENvbnRlbnQgPSBwcm9jZXNzSW5saW5lQ29kZShodG1sQ29udGVudCk7XG4gICAgICAgIFxuICAgICAgICAvLyBQcm9jZXNzIGhlYWRlcnMgd2l0aCBJRHNcbiAgICAgICAgaHRtbENvbnRlbnQgPSBodG1sQ29udGVudC5yZXBsYWNlKC9eIyMjICguKiQpL2dpbSwgKG1hdGNoLCB0ZXh0KSA9PiB7XG4gICAgICAgICAgY29uc3QgaWQgPSB0ZXh0LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW15hLXowLTldKy9nLCAnLScpLnJlcGxhY2UoLyheLXwtJCkvZywgJycpO1xuICAgICAgICAgIHJldHVybiBgPGgzIGlkPVwiJHtpZH1cIj4ke3RleHR9PC9oMz5gO1xuICAgICAgICB9KTtcbiAgICAgICAgaHRtbENvbnRlbnQgPSBodG1sQ29udGVudC5yZXBsYWNlKC9eIyMgKC4qJCkvZ2ltLCAobWF0Y2gsIHRleHQpID0+IHtcbiAgICAgICAgICBjb25zdCBpZCA9IHRleHQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bXmEtejAtOV0rL2csICctJykucmVwbGFjZSgvKF4tfC0kKS9nLCAnJyk7XG4gICAgICAgICAgcmV0dXJuIGA8aDIgaWQ9XCIke2lkfVwiPiR7dGV4dH08L2gyPmA7XG4gICAgICAgIH0pO1xuICAgICAgICBodG1sQ29udGVudCA9IGh0bWxDb250ZW50LnJlcGxhY2UoL14jICguKiQpL2dpbSwgJzxoMT4kMTwvaDE+Jyk7XG4gICAgICAgIFxuICAgICAgICAvLyBQcm9jZXNzIGJvbGQgYW5kIGl0YWxpY1xuICAgICAgICBodG1sQ29udGVudCA9IGh0bWxDb250ZW50LnJlcGxhY2UoL1xcKlxcKiguKj8pXFwqXFwqL2csICc8c3Ryb25nPiQxPC9zdHJvbmc+Jyk7XG4gICAgICAgIGh0bWxDb250ZW50ID0gaHRtbENvbnRlbnQucmVwbGFjZSgvXFwqKC4qPylcXCovZywgJzxlbT4kMTwvZW0+Jyk7XG4gICAgICAgIFxuICAgICAgICAvLyBQcm9jZXNzIGxpbmtzXG4gICAgICAgIGh0bWxDb250ZW50ID0gaHRtbENvbnRlbnQucmVwbGFjZSgvXFxbKFteXFxdXSspXFxdXFwoKFteKV0rKVxcKS9nLCAnPGEgaHJlZj1cIiQyXCI+JDE8L2E+Jyk7XG4gICAgICAgIFxuICAgICAgICAvLyBQcm9jZXNzIG9yZGVyZWQgbGlzdHNcbiAgICAgICAgaHRtbENvbnRlbnQgPSBodG1sQ29udGVudC5yZXBsYWNlKC9eXFxkK1xcLlxccysoLispJC9nbSwgJzxsaT4kMTwvbGk+Jyk7XG4gICAgICAgIGh0bWxDb250ZW50ID0gaHRtbENvbnRlbnQucmVwbGFjZSgvKDxsaT4uKjxcXC9saT4pL2csICc8b2w+JDE8L29sPicpO1xuICAgICAgICBcbiAgICAgICAgLy8gUHJvY2VzcyB1bm9yZGVyZWQgbGlzdHNcbiAgICAgICAgaHRtbENvbnRlbnQgPSBodG1sQ29udGVudC5yZXBsYWNlKC9eLVxccysoLispJC9nbSwgJzxsaT4kMTwvbGk+Jyk7XG4gICAgICAgIGh0bWxDb250ZW50ID0gaHRtbENvbnRlbnQucmVwbGFjZSgvKDxsaT4uKjxcXC9saT4pL2csICc8dWw+JDE8L3VsPicpO1xuICAgICAgICBcbiAgICAgICAgLy8gUHJvY2VzcyBwYXJhZ3JhcGhzXG4gICAgICAgIGh0bWxDb250ZW50ID0gaHRtbENvbnRlbnQuc3BsaXQoJ1xcblxcbicpLm1hcChwYXJhZ3JhcGggPT4ge1xuICAgICAgICAgIHBhcmFncmFwaCA9IHBhcmFncmFwaC50cmltKCk7XG4gICAgICAgICAgaWYgKCFwYXJhZ3JhcGgpIHJldHVybiAnJztcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBEb24ndCB3cmFwIGhlYWRlcnMsIGxpc3RzLCBvciBmb290bm90ZSBlbGVtZW50cyBpbiBwIHRhZ3NcbiAgICAgICAgICBpZiAocGFyYWdyYXBoLnN0YXJ0c1dpdGgoJzxoJykgfHwgXG4gICAgICAgICAgICAgIHBhcmFncmFwaC5zdGFydHNXaXRoKCc8dWw+JykgfHwgXG4gICAgICAgICAgICAgIHBhcmFncmFwaC5zdGFydHNXaXRoKCc8b2w+JykgfHxcbiAgICAgICAgICAgICAgcGFyYWdyYXBoLmluY2x1ZGVzKCdmb290bm90ZS13cmFwcGVyJykpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJhZ3JhcGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIHJldHVybiBgPHA+JHtwYXJhZ3JhcGh9PC9wPmA7XG4gICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICBcbiAgICAgICAgc2VnbWVudHMucHVzaCh7XG4gICAgICAgICAgdHlwZTogJ2h0bWwnLFxuICAgICAgICAgIGNvbnRlbnQ6IGh0bWxDb250ZW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiBzZWdtZW50cztcbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBjb250ZW50VG9Qcm9jZXNzID0gY29udGVudDtcbiAgICBcbiAgICAvLyBGaXJzdCwgdHJ5IHRvIHBhcnNlIG1hcmtkb3duIGlmIGl0IGxvb2tzIGxpa2UgaXQgaGFzIGZyb250bWF0dGVyXG4gICAgaWYgKGNvbnRlbnQuc3RhcnRzV2l0aCgnKysrJykpIHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlTWFya2Rvd24oY29udGVudCk7XG4gICAgICBzZXRQYXJzZWREYXRhKHBhcnNlZCk7XG4gICAgICBjb250ZW50VG9Qcm9jZXNzID0gcGFyc2VkLmNvbnRlbnQ7XG4gICAgfVxuICAgIFxuICAgIC8vIFBhcnNlIGZvb3Rub3Rlc1xuICAgIGNvbnN0IHsgcHJvY2Vzc2VkQ29udGVudCwgZm9vdG5vdGVzOiBwYXJzZWRGb290bm90ZXMgfSA9IHBhcnNlRm9vdG5vdGVzKGNvbnRlbnRUb1Byb2Nlc3MpO1xuICAgIHNldEZvb3Rub3RlcyhwYXJzZWRGb290bm90ZXMpO1xuICAgIFxuICAgIC8vIFBhcnNlIFA1U2tldGNoIGNvbXBvbmVudHMgZmlyc3RcbiAgICBjb25zdCBwNVNlZ21lbnRzID0gcGFyc2VQNVNrZXRjaENvbXBvbmVudHMocHJvY2Vzc2VkQ29udGVudCk7XG4gICAgXG4gICAgLy8gUGFyc2UgVmlkZW8gYW5kIFBERiBjb21wb25lbnRzIGZyb20gUDVTa2V0Y2ggc2VnbWVudHNcbiAgICBjb25zdCBmaW5hbFNlZ21lbnRzOiBDb250ZW50U2VnbWVudFtdID0gW107XG4gICAgcDVTZWdtZW50cy5mb3JFYWNoKHNlZ21lbnQgPT4ge1xuICAgICAgaWYgKHNlZ21lbnQudHlwZSA9PT0gJ3A1c2tldGNoJykge1xuICAgICAgICBmaW5hbFNlZ21lbnRzLnB1c2goc2VnbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBQYXJzZSBWaWRlbyBjb21wb25lbnRzIGZyb20gSFRNTCBzZWdtZW50c1xuICAgICAgICBjb25zdCB2aWRlb1NlZ21lbnRzID0gcGFyc2VWaWRlb0NvbXBvbmVudHMoc2VnbWVudC5jb250ZW50KTtcbiAgICAgICAgdmlkZW9TZWdtZW50cy5mb3JFYWNoKHZpZGVvU2VnbWVudCA9PiB7XG4gICAgICAgICAgaWYgKHZpZGVvU2VnbWVudC50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICBmaW5hbFNlZ21lbnRzLnB1c2godmlkZW9TZWdtZW50KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gUGFyc2UgUERGIGNvbXBvbmVudHMgZnJvbSByZW1haW5pbmcgSFRNTCBzZWdtZW50c1xuICAgICAgICAgICAgY29uc3QgcGRmU2VnbWVudHMgPSBwYXJzZVBERkNvbXBvbmVudHModmlkZW9TZWdtZW50LmNvbnRlbnQpO1xuICAgICAgICAgICAgcGRmU2VnbWVudHMuZm9yRWFjaChwZGZTZWdtZW50ID0+IHtcbiAgICAgICAgICAgICAgaWYgKHBkZlNlZ21lbnQudHlwZSA9PT0gJ3BkZicpIHtcbiAgICAgICAgICAgICAgICBmaW5hbFNlZ21lbnRzLnB1c2gocGRmU2VnbWVudCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gUHJvY2VzcyBtYXJrZG93biBmb3IgcmVtYWluaW5nIEhUTUwgc2VnbWVudHNcbiAgICAgICAgICAgICAgICBjb25zdCBtYXJrZG93blNlZ21lbnRzID0gcHJvY2Vzc01hcmtkb3duKHBkZlNlZ21lbnQuY29udGVudCk7XG4gICAgICAgICAgICAgICAgZmluYWxTZWdtZW50cy5wdXNoKC4uLm1hcmtkb3duU2VnbWVudHMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIHNldENvbnRlbnRTZWdtZW50cyhmaW5hbFNlZ21lbnRzKTtcbiAgfSwgW2NvbnRlbnRdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChjb250ZW50U2VnbWVudHMubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICAvLyBFeHRyYWN0IGhlYWRpbmdzIGFuZCBmb290bm90ZXMgYWZ0ZXIgY29udGVudCBpcyBwcm9jZXNzZWRcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNvbnN0IGhlYWRpbmdFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTEVsZW1lbnQ+KCdoMltpZF0sIGgzW2lkXScpO1xuICAgICAgY29uc3QgZXh0cmFjdGVkSGVhZGluZ3M6IEhlYWRpbmdbXSA9IEFycmF5LmZyb20oaGVhZGluZ0VsZW1lbnRzKS5tYXAoKGhlYWRpbmcpID0+ICh7XG4gICAgICAgIGlkOiBoZWFkaW5nLmlkLFxuICAgICAgICB0ZXh0OiBoZWFkaW5nLnRleHRDb250ZW50IHx8ICcnLFxuICAgICAgICBsZXZlbDogcGFyc2VJbnQoaGVhZGluZy50YWdOYW1lLmNoYXJBdCgxKSlcbiAgICAgIH0pKTtcbiAgICAgIHNldEhlYWRpbmdzKGV4dHJhY3RlZEhlYWRpbmdzKTtcblxuICAgICAgLy8gSW1hZ2UgY2xpY2sgem9vbVxuICAgICAgY29uc3QgaW1nRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsPEhUTUxJbWFnZUVsZW1lbnQ+KCcuYmxvZy1jb250ZW50LWNvbnRhaW5lciBpbWcnKTtcbiAgICAgIGltZ0VsZW1lbnRzLmZvckVhY2goKGltZykgPT4ge1xuICAgICAgICBpbWcuc3R5bGUuY3Vyc29yID0gJ3pvb20taW4nO1xuICAgICAgICBpbWcub25jbGljayA9ICgpID0+IGhhbmRsZUltYWdlQ2xpY2soaW1nLnNyYyk7XG4gICAgICB9KTtcblxuICAgICAgLy8gU2V0dXAgZm9vdG5vdGUgdG9nZ2xpbmcgd2l0aCBhIGRlbGF5IHRvIGVuc3VyZSBET00gaXMgcmVhZHlcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb25zdCBmb290bm90ZUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsPEhUTUxCdXR0b25FbGVtZW50PignLmZvb3Rub3RlLWJ1dHRvbicpO1xuICAgICAgICBjb25zb2xlLmxvZygnRm91bmQgZm9vdG5vdGUgYnV0dG9uczonLCBmb290bm90ZUJ1dHRvbnMubGVuZ3RoKTtcbiAgICAgICAgXG4gICAgICAgIGZvb3Rub3RlQnV0dG9ucy5mb3JFYWNoKChidXR0b24sIGluZGV4KSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coYFNldHRpbmcgdXAgYnV0dG9uICR7aW5kZXh9OmAsIGJ1dHRvbik7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gUmVtb3ZlIGFueSBleGlzdGluZyBsaXN0ZW5lcnNcbiAgICAgICAgICBidXR0b24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVGb290bm90ZUNsaWNrKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBBZGQgbmV3IGxpc3RlbmVyXG4gICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlRm9vdG5vdGVDbGljayk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQWxzbyBhZGQgb25jbGljayBhcyBiYWNrdXBcbiAgICAgICAgICBidXR0b24ub25jbGljayA9IChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgY29uc3QgZm9vdG5vdGVJZCA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtZm9vdG5vdGUtaWQnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0Zvb3Rub3RlIGNsaWNrZWQgdmlhIG9uY2xpY2s6JywgeyBmb290bm90ZUlkIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZm9vdG5vdGVJZCkge1xuICAgICAgICAgICAgICB0b2dnbGVGb290bm90ZShmb290bm90ZUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH0sIDIwMCk7XG5cblxuXG4gICAgICAvLyBBZGQgZ2xvYmFsIGNsaWNrIGhhbmRsZXIgYXMgYmFja3VwXG4gICAgICBjb25zdCBoYW5kbGVHbG9iYWxDbGljayA9IChlOiBFdmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldCBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2Zvb3Rub3RlLWJ1dHRvbicpKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgY29uc3QgZm9vdG5vdGVJZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZm9vdG5vdGUtaWQnKTtcbiAgICAgICAgICBcbiAgICAgICAgICBjb25zb2xlLmxvZygnRm9vdG5vdGUgY2xpY2tlZCB2aWEgZ2xvYmFsIGhhbmRsZXI6JywgeyBmb290bm90ZUlkIH0pO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmIChmb290bm90ZUlkKSB7XG4gICAgICAgICAgICB0b2dnbGVGb290bm90ZShmb290bm90ZUlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlR2xvYmFsQ2xpY2spO1xuXG4gICAgICAvLyBObyBuZWVkIHRvIGRpc3BhdGNoIGxvY29tb3RpdmUtdXBkYXRlIG9uIGJsb2cgcGFnZXMgc2luY2Ugc21vb3RoIHNjcm9sbCBpcyBkaXNhYmxlZFxuICAgIH0sIDEwMCk7XG4gIH0sIFtjb250ZW50U2VnbWVudHNdKTtcblxuICAvLyBTZXBhcmF0ZSBmdW5jdGlvbiBmb3IgZm9vdG5vdGUgY2xpY2sgaGFuZGxpbmdcbiAgY29uc3QgaGFuZGxlRm9vdG5vdGVDbGljayA9IChlOiBFdmVudCkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGNvbnN0IGJ1dHRvbiA9IGUudGFyZ2V0IGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICAgIGNvbnN0IGZvb3Rub3RlSWQgPSBidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLWZvb3Rub3RlLWlkJyk7XG4gICAgXG4gICAgY29uc29sZS5sb2coJ0Zvb3Rub3RlIGNsaWNrZWQgdmlhIGV2ZW50IGxpc3RlbmVyOicsIHsgZm9vdG5vdGVJZCB9KTtcbiAgICBcbiAgICBpZiAoZm9vdG5vdGVJZCkge1xuICAgICAgdG9nZ2xlRm9vdG5vdGUoZm9vdG5vdGVJZCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEZ1bmN0aW9uIHRvIHRvZ2dsZSBmb290bm90ZSB2aXNpYmlsaXR5XG4gIGNvbnN0IHRvZ2dsZUZvb3Rub3RlID0gKGlkOiBzdHJpbmcpID0+IHtcbiAgICBjb25zb2xlLmxvZygndG9nZ2xlRm9vdG5vdGUgY2FsbGVkIHdpdGg6JywgeyBpZCB9KTtcbiAgICBjb25zb2xlLmxvZygnQWxsIGZvb3Rub3RlIGNvbnRlbnRzIGluIHJlZjonLCBmb290bm90ZUNvbnRlbnRzUmVmLmN1cnJlbnQpO1xuICAgIFxuICAgIC8vIEdldCBjb250ZW50IGZyb20gcmVmXG4gICAgY29uc3QgZm9vdG5vdGVDb250ZW50ID0gZm9vdG5vdGVDb250ZW50c1JlZi5jdXJyZW50W2lkXTtcbiAgICBjb25zb2xlLmxvZygnRm9vdG5vdGUgY29udGVudCBmb3IgaWQnLCBpZCwgJzonLCBmb290bm90ZUNvbnRlbnQpO1xuICAgIFxuICAgIGlmICghZm9vdG5vdGVDb250ZW50KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdObyBmb290bm90ZSBjb250ZW50IGZvdW5kIGZvciBpZDonLCBpZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8vIFJlbW92ZSBoaWdobGlnaHQgZnJvbSBhbGwgZm9vdG5vdGVzXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZvb3Rub3RlLWhpZ2hsaWdodCcpLmZvckVhY2goZWwgPT4ge1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnZm9vdG5vdGUtaGlnaGxpZ2h0Jyk7XG4gICAgfSk7XG4gICAgXG4gICAgLy8gUmVtb3ZlIGFueSBleGlzdGluZyBmb290bm90ZXNcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZHluYW1pYy1mb290bm90ZScpLmZvckVhY2goZWwgPT4ge1xuICAgICAgZWwucmVtb3ZlKCk7XG4gICAgfSk7XG4gICAgXG4gICAgLy8gR2V0IHRoZSBidXR0b24gdGhhdCB3YXMgY2xpY2tlZFxuICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWZvb3Rub3RlLWlkPVwiJHtpZH1cIl1gKSBhcyBIVE1MRWxlbWVudDtcbiAgICBcbiAgICBpZiAoYnV0dG9uKSB7XG4gICAgICBjb25zdCB3cmFwcGVyID0gYnV0dG9uLmNsb3Nlc3QoJy5mb290bm90ZS13cmFwcGVyJykgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICBcbiAgICAgIGlmICh3cmFwcGVyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdXcmFwcGVyOicsIHdyYXBwZXIpO1xuICAgICAgICBcbiAgICAgICAgLy8gU2V0IHdyYXBwZXIgcG9zaXRpb25cbiAgICAgICAgd3JhcHBlci5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgICAgIFxuICAgICAgICAvLyBDcmVhdGUgdGhlIGZvb3Rub3RlIHdpdGggc2ltcGxlIGNlbnRlcmVkIHBvc2l0aW9uaW5nXG4gICAgICAgIGNvbnN0IGZvb3Rub3RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGZvb3Rub3RlLmNsYXNzTmFtZSA9ICdkeW5hbWljLWZvb3Rub3RlJztcbiAgICAgICAgZm9vdG5vdGUuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICBmb290bm90ZS5zdHlsZS5sZWZ0ID0gJzAlJztcbiAgICAgICAgZm9vdG5vdGUuc3R5bGUudG9wID0gJzE3MCUnO1xuICAgICAgICBmb290bm90ZS5zdHlsZS56SW5kZXggPSAnMTAwMCc7XG4gICAgICAgIGZvb3Rub3RlLmlubmVySFRNTCA9IGBcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9vdG5vdGUtY29udGVudFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvb3Rub3RlLWhlYWRlclwiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZvb3Rub3RlLW51bWJlclwiPiR7aWR9PC9zcGFuPlxuICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZm9vdG5vdGUtY2xvc2VcIiBvbmNsaWNrPVwiY2xvc2VGb290bm90ZSgnJHtpZH0nKVwiPsOXPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb290bm90ZS10ZXh0XCI+PC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgICAgIFxuICAgICAgICAvLyBTZXQgdGhlIEhUTUwgY29udGVudCBwcm9wZXJseSB0byByZW5kZXIgbGlua3NcbiAgICAgICAgY29uc3QgZm9vdG5vdGVUZXh0RWxlbWVudCA9IGZvb3Rub3RlLnF1ZXJ5U2VsZWN0b3IoJy5mb290bm90ZS10ZXh0JykgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIGlmIChmb290bm90ZVRleHRFbGVtZW50KSB7XG4gICAgICAgICAgZm9vdG5vdGVUZXh0RWxlbWVudC5pbm5lckhUTUwgPSBmb290bm90ZUNvbnRlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEFkZCB0aGUgZm9vdG5vdGVcbiAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChmb290bm90ZSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEhpZ2hsaWdodCB0aGUgYnV0dG9uXG4gICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnZm9vdG5vdGUtaGlnaGxpZ2h0Jyk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEZ1bmN0aW9uIHRvIGNsb3NlIGZvb3Rub3Rlc1xuICBjb25zdCBjbG9zZUZvb3Rub3RlID0gKGlkOiBzdHJpbmcpID0+IHtcbiAgICAvLyBSZW1vdmUgdGhlIGZvb3Rub3RlXG4gICAgY29uc3QgZm9vdG5vdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuZHluYW1pYy1mb290bm90ZWApO1xuICAgIGlmIChmb290bm90ZSkge1xuICAgICAgZm9vdG5vdGUucmVtb3ZlKCk7XG4gICAgfVxuICAgIFxuICAgIC8vIFJlbW92ZSBoaWdobGlnaHQgZnJvbSB0aGUgYnV0dG9uXG4gICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtZm9vdG5vdGUtaWQ9XCIke2lkfVwiXWApIGFzIEhUTUxFbGVtZW50O1xuICAgIGlmIChidXR0b24pIHtcbiAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdmb290bm90ZS1oaWdobGlnaHQnKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gTWFrZSBjbG9zZUZvb3Rub3RlIGF2YWlsYWJsZSBnbG9iYWxseVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICh3aW5kb3cgYXMgYW55KS5jbG9zZUZvb3Rub3RlID0gY2xvc2VGb290bm90ZTtcbiAgfSwgW10pO1xuXG4gIC8vIEZ1bmN0aW9uIHRvIGhhbmRsZSBpbWFnZSBjbGljayBhbmQgem9vbVxuICBjb25zdCBoYW5kbGVJbWFnZUNsaWNrID0gKHNyYzogc3RyaW5nKSA9PiB7XG4gICAgc2V0Wm9vbWVkSW1hZ2Uoc3JjKTtcbiAgfTtcblxuICBjb25zdCBjbG9zZVpvb21lZEltYWdlID0gKCkgPT4ge1xuICAgIHNldFpvb21lZEltYWdlKG51bGwpO1xuICB9O1xuXG4gIC8vIEdldCBkaXNwbGF5IHZhbHVlcyBmcm9tIHByb3BzIG9yIHBhcnNlZCBtZXRhZGF0YVxuICBjb25zdCBkaXNwbGF5VGl0bGUgPSB0aXRsZSB8fCBwYXJzZWREYXRhPy5tZXRhZGF0YS50aXRsZSB8fCAnJztcbiAgY29uc3QgZGlzcGxheURhdGUgPSBkYXRlIHx8IHBhcnNlZERhdGE/Lm1ldGFkYXRhLmRhdGU7XG4gIGNvbnN0IGRpc3BsYXlBdXRob3IgPSBhdXRob3IgfHwgcGFyc2VkRGF0YT8ubWV0YWRhdGEuYXV0aG9yO1xuICBjb25zdCBkaXNwbGF5SW1hZ2UgPSBpbWFnZSB8fCBwYXJzZWREYXRhPy5tZXRhZGF0YS5pbWFnZTtcbiAgY29uc3QgZGlzcGxheURlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24gfHwgcGFyc2VkRGF0YT8ubWV0YWRhdGEuZGVzY3JpcHRpb247XG5cbiAgICByZXR1cm4gKFxuICAgIDxhcnRpY2xlIGNsYXNzTmFtZT1cInByb3NlIGRhcms6cHJvc2UtaW52ZXJ0IG1heC13LW5vbmVcIj5cbiAgICAgIHsvKiBNYWluIGNvbnRhaW5lciB3aXRoIHRpdGxlIGFuZCBjb250ZW50IGNlbnRlcmVkIHJlbGF0aXZlIHRvIHdob2xlIHBhZ2UgKi99XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlbGF0aXZlIHctZnVsbFwiPlxuICAgICAgICB7LyogVE9DIG9uIGxlZnQgc2lkZSBvbiBsYXJnZSBzY3JlZW5zICovfVxuICAgICAgICB7aGVhZGluZ3MubGVuZ3RoID4gMCAmJiB0b2NWaXNpYmxlICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhpZGRlbiB4bDpibG9jayB3LTQ4XCIgc3R5bGU9e3sgXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgICAgICAgIGxlZnQ6IGAke3RvY1Bvc2l0aW9uLmxlZnR9cmVtYCxcbiAgICAgICAgICAgIHRvcDogYCR7dG9jUG9zaXRpb24udG9wfXJlbWAsXG4gICAgICAgICAgICB6SW5kZXg6IDEwLFxuICAgICAgICAgICAgbWF4SGVpZ2h0OiAnY2FsYygxMDB2aCAtIDMyMHB4KScsIFxuICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICAgICAgdHJhbnNpdGlvbjogJ3RvcCAwLjNzIGVhc2Utb3V0LCBvcGFjaXR5IDAuM3MgZWFzZS1vdXQnLFxuICAgICAgICAgICAgb3BhY2l0eTogdG9jVmlzaWJsZSA/IDEgOiAwXG4gICAgICAgICAgfX0+XG4gICAgICAgICAgICA8VGFibGVPZkNvbnRlbnRzIGhlYWRpbmdzPXtoZWFkaW5nc30gLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgICAgXG4gICAgICAgIHsvKiBDb250ZW50IGFyZWEgLSBjZW50ZXJlZCB3aXRoIHJlc3BlY3QgdG8gd2hvbGUgcGFnZSAqL31cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteC1hdXRvXCI+XG4gICAgICAgICAgey8qIEhlYWRlciBzZWN0aW9uIHdpdGggdGl0bGUsIGRhdGUsIGFuZCBkZXNjcmlwdGlvbiAqL31cbiAgICAgICAgICA8aGVhZGVyIGNsYXNzTmFtZT1cIm1iLTEyIHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICB7ZGlzcGxheVRpdGxlICYmIChcbiAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRleHQtNnhsIG1kOnRleHQtNXhsIGZvbnQtbWVkaXVtIG1iLTYgbW9udHJlYWxcIj57ZGlzcGxheVRpdGxlfTwvaDE+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBnYXAtNCB0ZXh0LWdyYXktNjAwIGRhcms6dGV4dC1ncmF5LTMwMCBtYi02XCI+XG4gICAgICAgICAgICAgIHtkaXNwbGF5QXV0aG9yICYmIDxzcGFuPntkaXNwbGF5QXV0aG9yfTwvc3Bhbj59XG4gICAgICAgICAgICAgIHtkaXNwbGF5QXV0aG9yICYmIGRpc3BsYXlEYXRlICYmIDxzcGFuPuKAojwvc3Bhbj59XG4gICAgICAgICAgICAgIHtkaXNwbGF5RGF0ZSAmJiAoXG4gICAgICAgICAgICAgICAgPHRpbWUgZGF0ZVRpbWU9e2Rpc3BsYXlEYXRlfT5cbiAgICAgICAgICAgICAgICAgIHsoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBbeWVhciwgbW9udGgsIGRheV0gPSBkaXNwbGF5RGF0ZS5zcGxpdCgnLScpLm1hcChOdW1iZXIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgbW9udGggLSAxLCBkYXkpLnRvTG9jYWxlRGF0ZVN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgfSkoKX1cbiAgICAgICAgICAgICAgICA8L3RpbWU+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHtkaXNwbGF5RGVzY3JpcHRpb24gJiYgKFxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXhsIHRleHQtZ3JheS02MDAgZGFyazp0ZXh0LWdyYXktMzAwIG1heC13LTN4bCBteC1hdXRvIGxlYWRpbmctcmVsYXhlZFwiPntkaXNwbGF5RGVzY3JpcHRpb259PC9wPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2hlYWRlcj5cblxuXG5cbiAgICAgICAgICB7LyogTWFpbiBjb250ZW50ICovfVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmxvZy1jb250ZW50LWNvbnRhaW5lciBtYXgtdy0zeGwgbXgtYXV0b1wiPlxuICAgICAgICAgICAge2NvbnRlbnRTZWdtZW50cy5tYXAoKHNlZ21lbnQsIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgIDxkaXYga2V5PXtpbmRleH0+XG4gICAgICAgICAgICAgICAge3NlZ21lbnQudHlwZSA9PT0gJ2h0bWwnID8gKFxuICAgICAgICAgICAgICAgICAgPGRpdiBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IHNlZ21lbnQuY29udGVudCB9fSAvPlxuICAgICAgICAgICAgICAgICkgOiBzZWdtZW50LnR5cGUgPT09ICdwNXNrZXRjaCcgJiYgc2VnbWVudC5wNVNrZXRjaCA/IChcbiAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxQNVNrZXRjaFxuICAgICAgICAgICAgICAgICAgICAgIHNrZXRjaFBhdGg9e3NlZ21lbnQucDVTa2V0Y2guc2tldGNoUGF0aH1cbiAgICAgICAgICAgICAgICAgICAgICB3aWR0aD17c2VnbWVudC5wNVNrZXRjaC53aWR0aH1cbiAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9e3NlZ21lbnQucDVTa2V0Y2guaGVpZ2h0fVxuICAgICAgICAgICAgICAgICAgICAgIHNrZXRjaFdpZHRoPXtzZWdtZW50LnA1U2tldGNoLnNrZXRjaFdpZHRofVxuICAgICAgICAgICAgICAgICAgICAgIHNrZXRjaEhlaWdodD17c2VnbWVudC5wNVNrZXRjaC5za2V0Y2hIZWlnaHR9XG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzZWdtZW50LnA1U2tldGNoLmNsYXNzTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICkgOiBzZWdtZW50LnR5cGUgPT09ICd2aWRlbycgJiYgc2VnbWVudC52aWRlbyA/IChcbiAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxWaWRlb1xuICAgICAgICAgICAgICAgICAgICAgIHNyYz17c2VnbWVudC52aWRlby5zcmN9XG4gICAgICAgICAgICAgICAgICAgICAgd2lkdGg9e3NlZ21lbnQudmlkZW8ud2lkdGh9XG4gICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PXtzZWdtZW50LnZpZGVvLmhlaWdodH1cbiAgICAgICAgICAgICAgICAgICAgICBjb250cm9scz17c2VnbWVudC52aWRlby5jb250cm9sc31cbiAgICAgICAgICAgICAgICAgICAgICBhdXRvUGxheT17c2VnbWVudC52aWRlby5hdXRvUGxheX1cbiAgICAgICAgICAgICAgICAgICAgICBtdXRlZD17c2VnbWVudC52aWRlby5tdXRlZH1cbiAgICAgICAgICAgICAgICAgICAgICBsb29wPXtzZWdtZW50LnZpZGVvLmxvb3B9XG4gICAgICAgICAgICAgICAgICAgICAgcG9zdGVyPXtzZWdtZW50LnZpZGVvLnBvc3Rlcn1cbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3NlZ21lbnQudmlkZW8uY2xhc3NOYW1lfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgKSA6IHNlZ21lbnQudHlwZSA9PT0gJ3BkZicgJiYgc2VnbWVudC5wZGYgPyAoXG4gICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8UERGXG4gICAgICAgICAgICAgICAgICAgICAgc3JjPXtzZWdtZW50LnBkZi5zcmN9XG4gICAgICAgICAgICAgICAgICAgICAgd2lkdGg9e3NlZ21lbnQucGRmLndpZHRofVxuICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD17c2VnbWVudC5wZGYuaGVpZ2h0fVxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c2VnbWVudC5wZGYuY2xhc3NOYW1lfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgIHNlZ21lbnQuY29kZUJsb2NrICYmIChcbiAgICAgICAgICAgICAgICAgICAgPENvZGVCbG9ja1xuICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlPXtzZWdtZW50LmNvZGVCbG9jay5sYW5ndWFnZX1cbiAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZT17c2VnbWVudC5jb2RlQmxvY2suZmlsZW5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgY29kZT17c2VnbWVudC5jb2RlQmxvY2suY29kZX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICB7LyogSW1hZ2UgWm9vbSBGZWF0dXJlICovfVxuICAgICAge3pvb21lZEltYWdlICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaXhlZCB0b3AtMCBsZWZ0LTAgdy1mdWxsIGgtZnVsbCBiZy1ibGFjayBiZy1vcGFjaXR5LTgwIHotNTAgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXJcIiBvbkNsaWNrPXtjbG9zZVpvb21lZEltYWdlfT5cbiAgICAgICAgICA8SW1hZ2VcbiAgICAgICAgICAgIHNyYz17em9vbWVkSW1hZ2V9XG4gICAgICAgICAgICBhbHQ9XCJab29tZWQgSW1hZ2VcIlxuICAgICAgICAgICAgd2lkdGg9ezEyMDB9XG4gICAgICAgICAgICBoZWlnaHQ9ezgwMH1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInJvdW5kZWQtbGcgY3Vyc29yLXpvb20tb3V0XCJcbiAgICAgICAgICAgIHN0eWxlPXt7IG1heFdpZHRoOiAnOTAlJywgbWF4SGVpZ2h0OiAnOTAlJywgb2JqZWN0Rml0OiAnY29udGFpbicgfX1cbiAgICAgICAgICAgIG9uQ2xpY2s9e2Nsb3NlWm9vbWVkSW1hZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgIDwvYXJ0aWNsZT5cbiAgKTtcbn0iXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJJbWFnZSIsIkNvZGVCbG9jayIsIlRhYmxlT2ZDb250ZW50cyIsInBhcnNlRm9vdG5vdGVzIiwiUDVTa2V0Y2giLCJWaWRlbyIsIlBERiIsIkJsb2dQb3N0IiwiY29udGVudCIsInRpdGxlIiwiZGF0ZSIsImF1dGhvciIsImltYWdlIiwiZGVzY3JpcHRpb24iLCJpYW1hIiwiaGVhZGluZ3MiLCJzZXRIZWFkaW5ncyIsImZvb3Rub3RlcyIsInNldEZvb3Rub3RlcyIsImZvb3Rub3RlQ29udGVudHMiLCJzZXRGb290bm90ZUNvbnRlbnRzIiwiem9vbWVkSW1hZ2UiLCJzZXRab29tZWRJbWFnZSIsImNvbnRlbnRTZWdtZW50cyIsInNldENvbnRlbnRTZWdtZW50cyIsInBhcnNlZERhdGEiLCJzZXRQYXJzZWREYXRhIiwidG9jUG9zaXRpb24iLCJzZXRUb2NQb3NpdGlvbiIsInRvcCIsImxlZnQiLCJ0b2NWaXNpYmxlIiwic2V0VG9jVmlzaWJsZSIsImZvb3Rub3RlQ29udGVudHNSZWYiLCJ0aWNraW5nIiwiaGFuZGxlU2Nyb2xsIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2Nyb2xsWSIsIndpbmRvdyIsIndpbmRvd0hlaWdodCIsImlubmVySGVpZ2h0IiwidG9jSGVpZ2h0IiwiZm9vdGVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29uc29sZSIsImxvZyIsImJhc2VUb3AiLCJtaW5Ub3AiLCJNYXRoIiwibWF4Iiwic2hvdWxkSGlkZSIsImZvb3RlclJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJmb290ZXJUb3AiLCJ0b3BJblJlbSIsInNjcm9sbENvbnRhaW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicGFzc2l2ZSIsInBhcnNlTWFya2Rvd24iLCJtYXJrZG93bkNvbnRlbnQiLCJmcm9udG1hdHRlclJlZ2V4IiwibWF0Y2giLCJmcm9udG1hdHRlciIsIm1ldGFkYXRhIiwibGluZXMiLCJzcGxpdCIsImZpbHRlciIsImxpbmUiLCJ0cmltIiwiZm9yRWFjaCIsImVxdWFsSW5kZXgiLCJpbmRleE9mIiwia2V5Iiwic3Vic3RyaW5nIiwidmFsdWUiLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJzbGljZSIsInByb2Nlc3NJbmxpbmVDb2RlIiwiaW5saW5lQ29kZVJlZ2V4IiwicmVwbGFjZSIsInBhcnNlUDVTa2V0Y2hDb21wb25lbnRzIiwic2VnbWVudHMiLCJwNVNrZXRjaFJlZ2V4IiwibGFzdEluZGV4IiwiZXhlYyIsImluZGV4IiwiYmVmb3JlQ29udGVudCIsInB1c2giLCJ0eXBlIiwicDVTa2V0Y2hQcm9wcyIsInNrZXRjaFBhdGgiLCJ3aWR0aCIsInBhcnNlSW50IiwiaGVpZ2h0IiwiY2xhc3NOYW1lIiwiZnVsbE1hdGNoIiwic2tldGNoV2lkdGhNYXRjaCIsInNrZXRjaEhlaWdodE1hdGNoIiwic2tldGNoV2lkdGgiLCJza2V0Y2hIZWlnaHQiLCJwNVNrZXRjaCIsImxlbmd0aCIsImFmdGVyQ29udGVudCIsInBhcnNlVmlkZW9Db21wb25lbnRzIiwidmlkZW9SZWdleCIsInZpZGVvUHJvcHMiLCJzcmMiLCJ3aWR0aE1hdGNoIiwiaGVpZ2h0TWF0Y2giLCJjb250cm9sc01hdGNoIiwiYXV0b1BsYXlNYXRjaCIsIm11dGVkTWF0Y2giLCJsb29wTWF0Y2giLCJwb3N0ZXJNYXRjaCIsImNvbnRyb2xzIiwiYXV0b1BsYXkiLCJtdXRlZCIsImxvb3AiLCJwb3N0ZXIiLCJ2aWRlbyIsInBhcnNlUERGQ29tcG9uZW50cyIsInBkZlJlZ2V4IiwicGRmUHJvcHMiLCJwZGYiLCJwcm9jZXNzTWFya2Rvd24iLCJwcm9jZXNzZWQiLCJjb2RlQmxvY2tzIiwiZm9vdG5vdGVSZWdleCIsImZvb3Rub3RlTWF0Y2giLCJhbGxGb290bm90ZXMiLCJmb290bm90ZUNvdW50IiwiZm9vdG5vdGVFbGVtZW50IiwiaWRNYXRjaCIsInRleHRNYXRjaCIsImNvbnRlbnRNYXRjaCIsImlkIiwidGV4dCIsImVuY29kZWRDb250ZW50IiwiZGVjb2RlZENvbnRlbnQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJjdXJyZW50IiwicmVwbGFjZW1lbnQiLCJwYXJ0cyIsInBhcnQiLCJpbmNsdWRlcyIsImxhbmd1YWdlIiwiY29kZSIsImNvZGVCbG9jayIsImZpbGVuYW1lIiwiaHRtbENvbnRlbnQiLCJ0b0xvd2VyQ2FzZSIsIm1hcCIsInBhcmFncmFwaCIsImpvaW4iLCJjb250ZW50VG9Qcm9jZXNzIiwicGFyc2VkIiwicHJvY2Vzc2VkQ29udGVudCIsInBhcnNlZEZvb3Rub3RlcyIsInA1U2VnbWVudHMiLCJmaW5hbFNlZ21lbnRzIiwic2VnbWVudCIsInZpZGVvU2VnbWVudHMiLCJ2aWRlb1NlZ21lbnQiLCJwZGZTZWdtZW50cyIsInBkZlNlZ21lbnQiLCJtYXJrZG93blNlZ21lbnRzIiwic2V0VGltZW91dCIsImhlYWRpbmdFbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJleHRyYWN0ZWRIZWFkaW5ncyIsIkFycmF5IiwiZnJvbSIsImhlYWRpbmciLCJ0ZXh0Q29udGVudCIsImxldmVsIiwidGFnTmFtZSIsImNoYXJBdCIsImltZ0VsZW1lbnRzIiwiaW1nIiwic3R5bGUiLCJjdXJzb3IiLCJvbmNsaWNrIiwiaGFuZGxlSW1hZ2VDbGljayIsImZvb3Rub3RlQnV0dG9ucyIsImJ1dHRvbiIsImhhbmRsZUZvb3Rub3RlQ2xpY2siLCJlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJmb290bm90ZUlkIiwiZ2V0QXR0cmlidXRlIiwidG9nZ2xlRm9vdG5vdGUiLCJoYW5kbGVHbG9iYWxDbGljayIsInRhcmdldCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiZm9vdG5vdGVDb250ZW50IiwiZXJyb3IiLCJlbCIsInJlbW92ZSIsIndyYXBwZXIiLCJjbG9zZXN0IiwicG9zaXRpb24iLCJmb290bm90ZSIsImNyZWF0ZUVsZW1lbnQiLCJ6SW5kZXgiLCJpbm5lckhUTUwiLCJmb290bm90ZVRleHRFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJhZGQiLCJjbG9zZUZvb3Rub3RlIiwiY2xvc2Vab29tZWRJbWFnZSIsImRpc3BsYXlUaXRsZSIsImRpc3BsYXlEYXRlIiwiZGlzcGxheUF1dGhvciIsImRpc3BsYXlJbWFnZSIsImRpc3BsYXlEZXNjcmlwdGlvbiIsImFydGljbGUiLCJkaXYiLCJtYXhIZWlnaHQiLCJvdmVyZmxvdyIsInRyYW5zaXRpb24iLCJvcGFjaXR5IiwiaGVhZGVyIiwiaDEiLCJzcGFuIiwidGltZSIsImRhdGVUaW1lIiwieWVhciIsIm1vbnRoIiwiZGF5IiwiTnVtYmVyIiwiRGF0ZSIsInRvTG9jYWxlRGF0ZVN0cmluZyIsInAiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsIm9uQ2xpY2siLCJhbHQiLCJtYXhXaWR0aCIsIm9iamVjdEZpdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/BlogPost.tsx\n"));

/***/ })

});